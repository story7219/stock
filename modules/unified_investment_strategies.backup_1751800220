# unified_investment_strategies.py - Core Module 모듈
# 역할: Core Module 관련 기능 제공

```python
"""
🎯 통합 투자 전략 모듈 (Unified Investment Strategies)
======================================================

전 세계 투자 대가 17명의 전략을 구현한 고품질 분석 시스템입니다.
중복 코드를 제거하고 최적화된 단일 모듈로 통합되었습니다.

투자 대가 목록:
1. 워런 버핏 (Warren Buffett) - 가치투자의 대가
2. 벤저민 그레이엄 (Benjamin Graham) - 가치투자 창시자
3. 피터 린치 (Peter Lynch) - 성장주 투자 전문가
4. 필립 피셔 (Philip Fisher) - 성장주 분석의 아버지
5. 존 템플턴 (John Templeton) - 글로벌 가치투자자
6. 조지 소로스 (George Soros) - 반사성 이론
7. 제시 리버모어 (Jesse Livermore) - 추세 매매의 전설
8. 빌 애크먼 (Bill Ackman) - 액티비스트 투자자
9. 칼 아이칸 (Carl Icahn) - 기업 사냥꾼
10. 레이 달리오 (Ray Dalio) - 전천후 포트폴리오
11. 스탠리 드러켄밀러 (Stanley Druckenmiller) - 거시경제 투자
12. 데이비드 테퍼 (David Tepper) - 디스트레스드 투자
13. 세스 클라만 (Seth Klarman) - 절대수익 추구
14. 하워드 막스 (Howard Marks) - 리스크 조정 수익
15. 조엘 그린블랫 (Joel Greenblatt) - 마법공식
16. 토마스 로우 프라이스 (Thomas Rowe Price) - 성장주 투자
17. 존 보글 (John Bogle) - 인덱스 투자 철학
"""

import math
import logging
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from abc import ABC, abstractmethod
from enum import Enum
import numpy as np

logger = logging.getLogger(__name__)


class StrategyType(Enum):
    """투자 전략 유형"""
    WARREN_BUFFETT = "warren_buffett"
    BENJAMIN_GRAHAM = "benjamin_graham"
    PETER_LYNCH = "peter_lynch"
    PHILIP_FISHER = "philip_fisher"
    JOHN_TEMPLETON = "john_templeton"
    GEORGE_SOROS = "george_soros"
    JESSE_LIVERMORE = "jesse_livermore"
    BILL_ACKMAN = "bill_ackman"
    CARL_ICAHN = "carl_icahn"
    RAY_DALIO = "ray_dalio"
    STANLEY_DRUCKENMILLER = "stanley_druckenmiller"
    DAVID_TEPPER = "david_tepper"
    SETH_KLARMAN = "seth_klarman"
    HOWARD_MARKS = "howard_marks"
    JOEL_GREENBLATT = "joel_greenblatt"
    THOMAS_ROWE_PRICE = "thomas_rowe_price"
    JOHN_BOGLE = "john_bogle"


@dataclass
class StrategyScore:
    """전략별 점수"""
    strategy_name: str
    score: float  # 0-100 점수
    weight: float  # 가중치
    reasoning: str  # 점수 산출 근거
    key_metrics: Dict[str, Any]  # 주요 지표들


class BaseInvestmentStrategy(ABC):
    """투자 전략 기본 클래스"""

    def __init__(self, name: str, weight: float):
        self.name = name
        self.weight = weight

    @abstractmethod
    def analyze(self, stock_data: Any) -> StrategyScore:
        """종목 분석"""
        pass

    @abstractmethod
    def get_strategy_info(self) -> Dict[str, Any]:
        """전략 정보"""
        pass

    def _safe_get_value(self, stock_data: Any, attr: str, default: Any = 0) -> Any:
        """안전한 속성 값 조회"""
        try:
            return getattr(stock_data, attr, default) or default
        except Exception as e:
            logger.warning(f"Attribute error: {e}")
            return default

    def _calculate_technical_score(self, stock_data: Any, indicators: List[str]) -> Tuple[float, List[str]]:
        """기술적 지표 기반 점수 계산"""
        score = 0.0
        reasoning_parts = []

        if 'rsi' in indicators:
            rsi = self._safe_get_value(stock_data, 'rsi')
            if rsi:
                if 30 <= rsi <= 70:
                    score += 10
                    reasoning_parts.append(f"적정 RSI {rsi:.1f} (+10점)")
                elif rsi < 30:
                    score += 15
                    reasoning_parts.append(f"과매도 RSI {rsi:.1f} (+15점)")
                elif rsi > 80:
                    score -= 5
                    reasoning_parts.append(f"과매수 RSI {rsi:.1f} (-5점)")
        return score, reasoning_parts
```