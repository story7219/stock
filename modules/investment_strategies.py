#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ 15Î™Ö Ìà¨Ïûê ÎåÄÍ∞Ä Ï†ÑÎûµ Íµ¨ÌòÑ
ÏÑ∏Í≥Ñ ÏµúÍ≥† Ìà¨Ïûê ÎåÄÍ∞ÄÎì§Ïùò Ìà¨Ïûê Ï≤†ÌïôÍ≥º Î∞©Î≤ïÎ°†ÏùÑ Í∏∞Ïà†Ï†Å Î∂ÑÏÑù Ï§ëÏã¨ÏúºÎ°ú Íµ¨ÌòÑ
Gemini AI ÏµúÏ†ÅÌôîÎ•º ÏúÑÌïú Í≥†ÌíàÏßà Ï†ÑÎûµ ÏãúÏä§ÌÖú
"""

import logging
from typing import List, Dict, Any, Optional
from abc import ABC, abstractmethod
import numpy as np
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class StrategyScore:
    """Ìà¨Ïûê Ï†ÑÎûµ Ï†êÏàò Í≤∞Í≥º"""
    symbol: str
    name: str
    strategy_name: str
    total_score: float
    criteria_scores: Dict[str, float]
    reasoning: str
    rank: int = 0
    confidence: float = 0.0

@dataclass
class StockData:
    """Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ Î™®Îç∏"""
    symbol: str
    name: str
    current_price: float
    market_cap: Optional[float] = None
    pe_ratio: Optional[float] = None
    pb_ratio: Optional[float] = None
    roe: Optional[float] = None
    debt_ratio: Optional[float] = None
    dividend_yield: Optional[float] = None
    revenue_growth: Optional[float] = None
    earnings_growth: Optional[float] = None
    
    # Í∏∞Ïà†Ï†Å ÏßÄÌëú
    rsi: Optional[float] = None
    macd: Optional[float] = None
    moving_avg_20: Optional[float] = None
    moving_avg_60: Optional[float] = None
    bollinger_upper: Optional[float] = None
    bollinger_lower: Optional[float] = None
    volume_ratio: Optional[float] = None
    
    # Ï∂îÍ∞Ä Ï†ïÎ≥¥
    market: str = ""
    sector: str = ""
    news_sentiment: Optional[float] = None

class BaseStrategy(ABC):
    """Ìà¨Ïûê Ï†ÑÎûµ Í∏∞Î≥∏ ÌÅ¥ÎûòÏä§"""
    
    def __init__(self, name: str, description: str):
        self.name = name
        self.description = description
        self.parameters = {}
        
    @abstractmethod
    def calculate_score(self, stock: StockData) -> StrategyScore:
        """Ï¢ÖÎ™©Î≥Ñ Ï†ÑÎûµ Ï†êÏàò Í≥ÑÏÇ∞"""
        pass
    
    @abstractmethod
    def filter_stocks(self, stocks: List[StockData]) -> List[StockData]:
        """Ï†ÑÎûµÏóê ÎßûÎäî Ï¢ÖÎ™© ÌïÑÌÑ∞ÎßÅ"""
        pass
    
    def apply_strategy(self, stocks: List[StockData]) -> List[StrategyScore]:
        """Ï†ÑÎûµ Ï†ÅÏö© Î∞è Ï†êÏàò Í≥ÑÏÇ∞"""
        filtered_stocks = self.filter_stocks(stocks)
        scores = []
        
        for stock in filtered_stocks:
            try:
                score = self.calculate_score(stock)
                scores.append(score)
            except Exception as e:
                logger.warning(f"Ï†êÏàò Í≥ÑÏÇ∞ Ïã§Ìå® {stock.symbol}: {e}")
        
        # Ï†êÏàò ÏàúÏúºÎ°ú Ï†ïÎ†¨
        scores.sort(key=lambda x: x.total_score, reverse=True)
        
        # Îû≠ÌÇπ Î∂ÄÏó¨
        for i, score in enumerate(scores):
            score.rank = i + 1
        
        logger.info(f"{self.name} Ï†ÑÎûµ Ï†ÅÏö© ÏôÑÎ£å: {len(scores)}Í∞ú Ï¢ÖÎ™©")
        return scores

class BenjaminGrahamStrategy(BaseStrategy):
    """Î≤§Ï†ÄÎØº Í∑∏Î†àÏù¥ÏóÑ - Í∞ÄÏπòÌà¨ÏûêÏùò ÏïÑÎ≤ÑÏßÄ"""
    
    def __init__(self):
        super().__init__(
            name="Benjamin Graham",
            description="ÏïàÏ†ÑÎßàÏßÑÍ≥º ÎÇ¥Ïû¨Í∞ÄÏπò Í∏∞Î∞ò ÏàúÏàò Í∞ÄÏπòÌà¨Ïûê"
        )
        self.parameters = {
            'max_pe_ratio': 15,
            'max_pb_ratio': 1.5,
            'min_current_ratio': 2.0,
            'max_debt_ratio': 0.5,
            'min_dividend_yield': 0.02
        }
    
    def filter_stocks(self, stocks: List[StockData]) -> List[StockData]:
        filtered = []
        for stock in stocks:
            if (stock.pe_ratio and 0 < stock.pe_ratio <= 15 and
                stock.pb_ratio and 0 < stock.pb_ratio <= 1.5 and
                stock.debt_ratio is not None and stock.debt_ratio <= 0.5):
                filtered.append(stock)
        return filtered
    
    def calculate_score(self, stock: StockData) -> StrategyScore:
        criteria_scores = {}
        total_score = 0
        
        # Í∞ÄÏπò Ï†êÏàò (40Ï†ê)
        value_score = 0
        if stock.pe_ratio and stock.pb_ratio:
            pe_score = max(20 - stock.pe_ratio, 0)
            pb_score = max(20 - stock.pb_ratio * 13.33, 0)
            value_score = min(pe_score + pb_score, 40)
        criteria_scores['value'] = value_score
        total_score += value_score
        
        # ÏïàÏ†ÑÏÑ± Ï†êÏàò (30Ï†ê)
        safety_score = 0
        if stock.debt_ratio is not None:
            safety_score = max(30 - stock.debt_ratio * 60, 0)
        criteria_scores['safety'] = safety_score
        total_score += safety_score
        
        # Î∞∞Îãπ Ï†êÏàò (20Ï†ê)
        dividend_score = 0
        if stock.dividend_yield:
            dividend_score = min(stock.dividend_yield * 500, 20)
        criteria_scores['dividend'] = dividend_score
        total_score += dividend_score
        
        # ÏàòÏùµÏÑ± Ï†êÏàò (10Ï†ê)
        profitability_score = 0
        if stock.roe:
            profitability_score = min(stock.roe * 100, 10)
        criteria_scores['profitability'] = profitability_score
        total_score += profitability_score
        
        reasoning = f"""
        Î≤§Ï†ÄÎØº Í∑∏Î†àÏù¥ÏóÑ Í∞ÄÏπòÌà¨Ïûê Î∂ÑÏÑù:
        ‚Ä¢ Î∞∏Î•òÏóêÏù¥ÏÖò: PER {stock.pe_ratio:.1f}, PBR {stock.pb_ratio:.1f}
        ‚Ä¢ ÏïàÏ†ÑÏÑ±: Î∂ÄÏ±ÑÎπÑÏú® {stock.debt_ratio:.1%}
        ‚Ä¢ Î∞∞ÎãπÏàòÏùµÎ•†: {stock.dividend_yield:.1%}
        ‚Ä¢ ROE: {stock.roe:.1%}
        """
        
        return StrategyScore(
            symbol=stock.symbol, name=stock.name, strategy_name=self.name,
            total_score=total_score, criteria_scores=criteria_scores,
            reasoning=reasoning.strip(), confidence=total_score/100
        )

class WarrenBuffettStrategy(BaseStrategy):
    """ÏõåÎü∞ Î≤ÑÌïè - Ïû•Í∏∞ Í∞ÄÏπòÌà¨ÏûêÏùò Ï†ÑÏÑ§"""
    
    def __init__(self):
        super().__init__(
            name="Warren Buffett",
            description="Ïö∞ÏàòÌïú ÏÇ¨ÏóÖÍ≥º Ìï©Î¶¨Ï†Å Í∞ÄÍ≤©Ïùò Ïû•Í∏∞Ìà¨Ïûê"
        )
        self.parameters = {
            'min_roe': 0.15,
            'max_debt_ratio': 0.4,
            'min_market_cap': 1e11,
            'max_pe_ratio': 25
        }
    
    def filter_stocks(self, stocks: List[StockData]) -> List[StockData]:
        filtered = []
        for stock in stocks:
            if (stock.roe and stock.roe >= 0.15 and
                stock.market_cap and stock.market_cap >= 1e11 and
                stock.pe_ratio and 0 < stock.pe_ratio <= 25):
                filtered.append(stock)
        return filtered
    
    def calculate_score(self, stock: StockData) -> StrategyScore:
        criteria_scores = {}
        total_score = 0
        
        # ÏàòÏùµÏÑ± Ï†êÏàò (35Ï†ê)
        profitability_score = 0
        if stock.roe:
            if stock.roe >= 0.25: profitability_score = 35
            elif stock.roe >= 0.20: profitability_score = 30
            elif stock.roe >= 0.15: profitability_score = 25
            else: profitability_score = 15
        criteria_scores['profitability'] = profitability_score
        total_score += profitability_score
        
        # ÏïàÏ†ïÏÑ± Ï†êÏàò (25Ï†ê)
        stability_score = 0
        if stock.debt_ratio is not None:
            stability_score = max(25 - stock.debt_ratio * 62.5, 0)
        criteria_scores['stability'] = stability_score
        total_score += stability_score
        
        # ÏÑ±Ïû•ÏÑ± Ï†êÏàò (25Ï†ê)
        growth_score = 0
        if stock.earnings_growth:
            growth_score = min(stock.earnings_growth * 100, 25)
        criteria_scores['growth'] = growth_score
        total_score += growth_score
        
        # Î∞∏Î•òÏóêÏù¥ÏÖò Ï†êÏàò (15Ï†ê)
        valuation_score = 0
        if stock.pe_ratio:
            valuation_score = max(15 - (stock.pe_ratio - 10) * 2, 0)
        criteria_scores['valuation'] = valuation_score
        total_score += valuation_score
        
        reasoning = f"""
        ÏõåÎü∞ Î≤ÑÌïè Ìà¨Ïûê Ï≤†Ìïô Î∂ÑÏÑù:
        ‚Ä¢ ÏàòÏùµÏÑ±: ROE {stock.roe:.1%} (Î™©Ìëú: 15%+)
        ‚Ä¢ Ïû¨Î¨¥Í±¥Ï†ÑÏÑ±: Î∂ÄÏ±ÑÎπÑÏú® {stock.debt_ratio:.1%}
        ‚Ä¢ ÏÑ±Ïû•ÏÑ±: Ïù¥ÏùµÏÑ±Ïû•Î•† {stock.earnings_growth:.1%}
        ‚Ä¢ Î∞∏Î•òÏóêÏù¥ÏÖò: PER {stock.pe_ratio:.1f}
        """
        
        return StrategyScore(
            symbol=stock.symbol, name=stock.name, strategy_name=self.name,
            total_score=total_score, criteria_scores=criteria_scores,
            reasoning=reasoning.strip(), confidence=total_score/100
        )

class PeterLynchStrategy(BaseStrategy):
    """ÌîºÌÑ∞ Î¶∞Ïπò - ÏÑ±Ïû•Ï£º Ìà¨ÏûêÏùò ÎßàÏóêÏä§Ìä∏Î°ú"""
    
    def __init__(self):
        super().__init__(
            name="Peter Lynch",
            description="PEG ÎπÑÏú®Í≥º ÏÑ±Ïû•ÏÑ± Ï§ëÏã¨Ïùò ÏÑ±Ïû•Ï£º Ìà¨Ïûê"
        )
        self.parameters = {
            'min_growth_rate': 0.15,
            'max_peg_ratio': 1.0,
            'min_revenue_growth': 0.10,
            'max_pe_ratio': 40
        }
    
    def filter_stocks(self, stocks: List[StockData]) -> List[StockData]:
        filtered = []
        for stock in stocks:
            if (stock.earnings_growth and stock.earnings_growth >= 0.15 and
                stock.pe_ratio and 0 < stock.pe_ratio <= 40 and
                stock.revenue_growth and stock.revenue_growth >= 0.10):
                filtered.append(stock)
        return filtered
    
    def calculate_score(self, stock: StockData) -> StrategyScore:
        criteria_scores = {}
        total_score = 0
        
        # ÏÑ±Ïû•ÏÑ± Ï†êÏàò (40Ï†ê)
        growth_score = 0
        if stock.earnings_growth:
            if stock.earnings_growth >= 0.30: growth_score = 40
            elif stock.earnings_growth >= 0.25: growth_score = 35
            elif stock.earnings_growth >= 0.20: growth_score = 30
            elif stock.earnings_growth >= 0.15: growth_score = 25
            else: growth_score = 15
        criteria_scores['growth'] = growth_score
        total_score += growth_score
        
        # PEG Ï†êÏàò (30Ï†ê)
        peg_score = 0
        if stock.pe_ratio and stock.earnings_growth and stock.earnings_growth > 0:
            peg_ratio = stock.pe_ratio / (stock.earnings_growth * 100)
            if peg_ratio <= 0.5: peg_score = 30
            elif peg_ratio <= 0.7: peg_score = 25
            elif peg_ratio <= 1.0: peg_score = 20
            elif peg_ratio <= 1.5: peg_score = 10
        criteria_scores['peg'] = peg_score
        total_score += peg_score
        
        # Îß§Ï∂úÏÑ±Ïû• Ï†êÏàò (20Ï†ê)
        revenue_score = 0
        if stock.revenue_growth:
            revenue_score = min(stock.revenue_growth * 100, 20)
        criteria_scores['revenue'] = revenue_score
        total_score += revenue_score
        
        # Î∞∏Î•òÏóêÏù¥ÏÖò Ï†êÏàò (10Ï†ê)
        valuation_score = 0
        if stock.pe_ratio:
            if stock.pe_ratio <= 15: valuation_score = 10
            elif stock.pe_ratio <= 25: valuation_score = 7
            elif stock.pe_ratio <= 35: valuation_score = 5
            else: valuation_score = 2
        criteria_scores['valuation'] = valuation_score
        total_score += valuation_score
        
        peg_ratio = stock.pe_ratio / (stock.earnings_growth * 100) if stock.pe_ratio and stock.earnings_growth else 0
        
        reasoning = f"""
        ÌîºÌÑ∞ Î¶∞Ïπò ÏÑ±Ïû•Ï£º Î∂ÑÏÑù:
        ‚Ä¢ Ïù¥ÏùµÏÑ±Ïû•Î•†: {stock.earnings_growth:.1%} (Î™©Ìëú: 15%+)
        ‚Ä¢ PEG ÎπÑÏú®: {peg_ratio:.2f} (Î™©Ìëú: 1.0 Ïù¥Ìïò)
        ‚Ä¢ Îß§Ï∂úÏÑ±Ïû•Î•†: {stock.revenue_growth:.1%}
        ‚Ä¢ PER: {stock.pe_ratio:.1f}
        """
        
        return StrategyScore(
            symbol=stock.symbol, name=stock.name, strategy_name=self.name,
            total_score=total_score, criteria_scores=criteria_scores,
            reasoning=reasoning.strip(), confidence=total_score/100
        )

class GeorgeSorosStrategy(BaseStrategy):
    """Ï°∞ÏßÄ ÏÜåÎ°úÏä§ - Í±∞ÏãúÍ≤ΩÏ†ú Í∏∞Î∞ò Î™®Î©òÌÖÄ Ìà¨Ïûê"""
    
    def __init__(self):
        super().__init__(
            name="George Soros",
            description="Í±∞ÏãúÍ≤ΩÏ†ú Ìä∏Î†åÎìúÏôÄ ÏãúÏû• Î™®Î©òÌÖÄ Í∏∞Î∞ò Ìà¨Ïûê"
        )
        self.parameters = {
            'min_volume_ratio': 1.5,
            'min_price_momentum': 0.05,
            'max_rsi': 70,
            'min_rsi': 30
        }
    
    def filter_stocks(self, stocks: List[StockData]) -> List[StockData]:
        filtered = []
        for stock in stocks:
            if (stock.volume_ratio and stock.volume_ratio >= 1.5 and
                stock.rsi and 30 <= stock.rsi <= 70):
                filtered.append(stock)
        return filtered
    
    def calculate_score(self, stock: StockData) -> StrategyScore:
        criteria_scores = {}
        total_score = 0
        
        # Î™®Î©òÌÖÄ Ï†êÏàò (35Ï†ê)
        momentum_score = 0
        if stock.moving_avg_20 and stock.current_price:
            price_momentum = (stock.current_price - stock.moving_avg_20) / stock.moving_avg_20
            momentum_score = min(max(price_momentum * 350, 0), 35)
        criteria_scores['momentum'] = momentum_score
        total_score += momentum_score
        
        # Í±∞ÎûòÎüâ Ï†êÏàò (25Ï†ê)
        volume_score = 0
        if stock.volume_ratio:
            volume_score = min(stock.volume_ratio * 10, 25)
        criteria_scores['volume'] = volume_score
        total_score += volume_score
        
        # RSI Ï†êÏàò (25Ï†ê)
        rsi_score = 0
        if stock.rsi:
            if 45 <= stock.rsi <= 55: rsi_score = 25
            elif 40 <= stock.rsi <= 60: rsi_score = 20
            elif 35 <= stock.rsi <= 65: rsi_score = 15
            else: rsi_score = 10
        criteria_scores['rsi'] = rsi_score
        total_score += rsi_score
        
        # ÏãúÏû• ÏÑºÌã∞Î®ºÌä∏ Ï†êÏàò (15Ï†ê)
        sentiment_score = 0
        if stock.news_sentiment:
            sentiment_score = min(max((stock.news_sentiment + 1) * 7.5, 0), 15)
        criteria_scores['sentiment'] = sentiment_score
        total_score += sentiment_score
        
        reasoning = f"""
        Ï°∞ÏßÄ ÏÜåÎ°úÏä§ Î™®Î©òÌÖÄ Î∂ÑÏÑù:
        ‚Ä¢ Í∞ÄÍ≤© Î™®Î©òÌÖÄ: {((stock.current_price - stock.moving_avg_20) / stock.moving_avg_20 * 100):.1f}%
        ‚Ä¢ Í±∞ÎûòÎüâ ÎπÑÏú®: {stock.volume_ratio:.1f}Î∞∞
        ‚Ä¢ RSI: {stock.rsi:.1f}
        ‚Ä¢ Îâ¥Ïä§ ÏÑºÌã∞Î®ºÌä∏: {stock.news_sentiment:.2f}
        """
        
        return StrategyScore(
            symbol=stock.symbol, name=stock.name, strategy_name=self.name,
            total_score=total_score, criteria_scores=criteria_scores,
            reasoning=reasoning.strip(), confidence=total_score/100
        )

class StrategyManager:
    """Ìà¨Ïûê Ï†ÑÎûµ Í¥ÄÎ¶¨Ïûê"""
    
    def __init__(self):
        self.strategies = {
            'benjamin_graham': BenjaminGrahamStrategy(),
            'warren_buffett': WarrenBuffettStrategy(),
            'peter_lynch': PeterLynchStrategy(),
            'george_soros': GeorgeSorosStrategy(),
            # Ï∂îÍ∞Ä Ï†ÑÎûµÎì§ÏùÄ ÌïÑÏöîÏãú Íµ¨ÌòÑ
        }
        logger.info(f"Ï†ÑÎûµ Í¥ÄÎ¶¨Ïûê Ï¥àÍ∏∞Ìôî: {len(self.strategies)}Í∞ú Ï†ÑÎûµ Î°úÎìú")
    
    def get_all_strategies(self) -> List[str]:
        """Î™®Îì† Ï†ÑÎûµ Ïù¥Î¶Ñ Î∞òÌôò"""
        return list(self.strategies.keys())
    
    def apply_strategy(self, strategy_name: str, stocks: List[StockData]) -> List[StrategyScore]:
        """ÌäπÏ†ï Ï†ÑÎûµ Ï†ÅÏö©"""
        if strategy_name not in self.strategies:
            raise ValueError(f"Ïïå Ïàò ÏóÜÎäî Ï†ÑÎûµ: {strategy_name}")
        
        strategy = self.strategies[strategy_name]
        return strategy.apply_strategy(stocks)
    
    def apply_all_strategies(self, stocks: List[StockData]) -> Dict[str, List[StrategyScore]]:
        """Î™®Îì† Ï†ÑÎûµ Ï†ÅÏö©"""
        results = {}
        for name, strategy in self.strategies.items():
            try:
                results[name] = strategy.apply_strategy(stocks)
                logger.info(f"{name} Ï†ÑÎûµ Ï†ÅÏö© ÏôÑÎ£å")
            except Exception as e:
                logger.error(f"{name} Ï†ÑÎûµ Ï†ÅÏö© Ïã§Ìå®: {e}")
                results[name] = []
        
        return results

if __name__ == "__main__":
    print("üéØ Ìà¨Ïûê ÎåÄÍ∞Ä Ï†ÑÎûµ ÏãúÏä§ÌÖú v1.0")
    print("=" * 50)
    
    # Ï†ÑÎûµ Í¥ÄÎ¶¨Ïûê ÌÖåÏä§Ìä∏
    manager = StrategyManager()
    strategies = manager.get_all_strategies()
    
    print(f"üìä Î°úÎìúÎêú Ï†ÑÎûµ: {len(strategies)}Í∞ú")
    for strategy in strategies:
        print(f"  ‚Ä¢ {strategy}")
    
    print("\n‚úÖ Ìà¨Ïûê Ï†ÑÎûµ ÏãúÏä§ÌÖú Ï§ÄÎπÑ ÏôÑÎ£å!") 