# unified_gemini_analyzer.py - Core Module 모듈
# 역할: Core Module 관련 기능 제공

```python
"""
🤖 통합 Gemini AI 분석기 (Unified Gemini Analyzer)
====================================================

실제 Gemini AI와 완전 연동하여 전 세계 최고 애널리스트 수준의 
주식 투자 분석을 제공하는 고품질 시스템입니다.

주요 기능:
1. 실제 Gemini AI API 연동 (gemini-1.5-pro 모델 사용)
2. 투자 대가 17개 전략 종합 분석 (워런 버핏, 벤저민 그레이엄 등)
3. 전 세계 최고 애널리스트 수준의 분석 (Goldman Sachs, JP Morgan 수준)
4. 고도화된 프롬프트 엔지니어링 및 structured 응답
5. 강력한 오류 처리 및 재시도 로직
6. 캐싱 시스템으로 성능 최적화
7. 중복 코드 제거 및 통합 최적화

투자 대가별 가중치:
- 워런 버핏: 15% (가치투자의 대가)
- 벤저민 그레이엄: 12% (가치투자 창시자)
- 피터 린치: 10% (성장주 투자)
- 기타 14개 전략: 각 4-8%
"""

import asyncio
import os
import time
import json
import logging
import traceback
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Union, Tuple
from dataclasses import dataclass, asdict
from abc import ABC, abstractmethod
import google.generativeai as genai
from pathlib import Path
import hashlib

# 로깅 설정
logger = logging.getLogger(__name__)

# 환경 변수에서 API 키 로드
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')


@dataclass
class InvestmentAnalysis:
    analysis_timestamp: str
    gemini_model_version: str
    # ... (이전 코드)


@dataclass
class MarketInsight:
    insight_timestamp: str
    confidence_level: float
    # ... (이전 코드)


class IAIAnalyzer(ABC):
    # ... (이전 코드)
    @abstractmethod
    async def analyze_stock(self, stock_data, market_context: Dict[str, Any]) -> Optional[InvestmentAnalysis]:
        pass


class UnifiedGeminiAnalyzer(IAIAnalyzer):
    # ... (이전 코드)

    async def analyze_stock(self, stock_data,
                            market_context: Dict[str, Any]
                            ) -> Optional[InvestmentAnalysis]:
        # ... (이전 코드)
        symbol = getattr(stock_data, 'symbol', 'Unknown')
        cache_key = f"stock_analysis_{symbol}_{hashlib.sha256(str(stock_data).encode()).hexdigest()}"
        cached_result = self._get_cache(cache_key)
        if cached_result:
            logger.info(f"📋 {symbol} 캐시된 분석 결과 반환")
            return cached_result
        # ... (이전 코드)

    def _create_analysis_prompt(self, stock_data,
                                market_context: Dict[str, Any]
                                ) -> str:
        symbol = stock_data.symbol
        company_name = stock_data.company_name
        current_price = stock_data.current_price
        change_percent = getattr(stock_data, 'change_percent', 0)

        prompt = f"""당신은 Goldman Sachs, JP Morgan 수준의 전 세계 최고 주식 애널리스트입니다.
다음 종목에 대해 투자 대가 17명의 전략을 종합하여 심층 분석해주세요.
## 분석 대상 종목
- 종목코드: {symbol}
- 회사명: {company_name}
- 현재가: {current_price:,.2f}
- 등락률: {change_percent:+.2f}%
```
- 분석 기간: 최근 1년
- 시장 상황: {market_context.get('market_context', '알 수 없음')}
- 추가 정보: {stock_data.get('additional_info', '')}
```
```
예시:
```
```
```
```
"""
        return prompt


    async def _call_gemini_async(self, prompt: str,
                                 max_retries: int = 3
                                 ) -> Optional[str]:
        # ... (이전 코드)
    # ... (나머지 코드)
```