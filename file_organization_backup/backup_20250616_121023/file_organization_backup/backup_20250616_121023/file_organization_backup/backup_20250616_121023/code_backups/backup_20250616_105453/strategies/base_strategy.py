"""
Í∏∞Î≥∏ Ï†ÑÎûµ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Î∞è Í≥µÌÜµ Í∏∞Îä•
"""

from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Dict, List, Optional, Any
from datetime import datetime
import logging

@dataclass
class StrategySignal:
    """Ï†ÑÎûµ Ïã†Ìò∏ Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§"""
    action: str  # BUY, SELL, HOLD
    confidence: float  # 0.0 ~ 1.0
    reason: str
    priority: int  # 1(ÏµúÍ≥†) ~ 10(ÏµúÏ†Ä)
    quantity: int = 1
    target_price: Optional[int] = None
    stop_loss: Optional[int] = None
    metadata: Dict[str, Any] = None

    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}

class BaseStrategy(ABC):
    """Î™®Îì† Ï†ÑÎûµÏùò Í∏∞Î≥∏ ÌÅ¥ÎûòÏä§"""
    
    def __init__(self, name: str):
        self.name = name
        self.enabled = True
        self.last_signal_time = None
        self.performance_metrics = {
            'total_signals': 0,
            'successful_signals': 0,
            'win_rate': 0.0
        }
    
    @abstractmethod
    async def analyze(self, stock_code: str, market_data: Dict) -> Optional[StrategySignal]:
        """Ï†ÑÎûµ Î∂ÑÏÑù Ïã§Ìñâ"""
        pass
    
    @abstractmethod
    def get_strategy_info(self) -> Dict[str, Any]:
        """Ï†ÑÎûµ Ï†ïÎ≥¥ Î∞òÌôò"""
        pass
    
    def update_performance(self, signal: StrategySignal, success: bool):
        """ÏÑ±Í≥º ÏóÖÎç∞Ïù¥Ìä∏"""
        self.performance_metrics['total_signals'] += 1
        if success:
            self.performance_metrics['successful_signals'] += 1
        
        self.performance_metrics['win_rate'] = (
            self.performance_metrics['successful_signals'] / 
            self.performance_metrics['total_signals']
        )
    
    def is_signal_valid(self, signal: StrategySignal) -> bool:
        """Ïã†Ìò∏ Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù"""
        if not signal:
            return False
        
        if signal.action not in ['BUY', 'SELL', 'HOLD']:
            return False
        
        if not (0.0 <= signal.confidence <= 1.0):
            return False
        
        return True
    
    def log_signal(self, signal: StrategySignal, stock_code: str):
        """Ïã†Ìò∏ Î°úÍπÖ"""
        logging.info(
            f"üéØ [{self.name}] {stock_code}: {signal.action} "
            f"(Ïã†Î¢∞ÎèÑ: {signal.confidence:.2f}, Ïö∞ÏÑ†ÏàúÏúÑ: {signal.priority}) - {signal.reason}"
        ) 