name: 🧠 고급 AI 코드 리뷰어

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  ai-code-review:
    name: 🤖 AI 코드 분석 및 리뷰
    runs-on: ubuntu-latest
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 AI 도구 설치
      run: |
        pip install openai anthropic google-generativeai
        pip install ast-grep semgrep bandit safety
        pip install gitpython pygments

    - name: 🔍 변경된 파일 분석
      id: changed-files
      run: |
        echo "changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '\.py$' | head -10)" >> $GITHUB_OUTPUT

    - name: 🧠 AI 코드 리뷰 실행
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python .github/scripts/advanced_ai_reviewer.py

    - name: 🛡️ 보안 취약점 스캔
      run: |
        echo "## 🛡️ 보안 분석 결과" > security_analysis.md
        echo "" >> security_analysis.md
        
        # Bandit으로 보안 취약점 검사
        bandit -r . -f json -o bandit_results.json || true
        
        # Safety로 의존성 취약점 검사
        safety check --json --output safety_results.json || true
        
        # Semgrep으로 코드 패턴 분석
        semgrep --config=auto --json --output=semgrep_results.json . || true

    - name: 📊 코드 품질 메트릭 계산
      run: |
        python .github/scripts/code_quality_metrics.py

    - name: 🎯 맞춤형 리뷰 생성
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // AI 리뷰 결과 읽기
          let aiReview = '';
          let securityAnalysis = '';
          let qualityMetrics = '';
          
          try {
            aiReview = fs.readFileSync('ai_review_results.md', 'utf8');
          } catch (e) { aiReview = 'AI 리뷰 결과를 읽을 수 없습니다.'; }
          
          try {
            securityAnalysis = fs.readFileSync('security_analysis.md', 'utf8');
          } catch (e) { securityAnalysis = '보안 분석 결과를 읽을 수 없습니다.'; }
          
          try {
            qualityMetrics = fs.readFileSync('quality_metrics.md', 'utf8');
          } catch (e) { qualityMetrics = '품질 메트릭을 읽을 수 없습니다.'; }
          
          // 종합 리뷰 댓글 생성
          const comprehensiveReview = `
          # 🧠 AI 코드 리뷰 리포트
          
          ## 📋 리뷰 요약
          - **분석 시간**: ${new Date().toLocaleString('ko-KR')}
          - **분석 파일 수**: ${context.payload.pull_request.changed_files}개
          - **추가된 라인**: +${context.payload.pull_request.additions}
          - **삭제된 라인**: -${context.payload.pull_request.deletions}
          
          ## 🤖 AI 분석 결과
          ${aiReview}
          
          ## 🛡️ 보안 분석
          ${securityAnalysis}
          
          ## 📊 코드 품질 메트릭
          ${qualityMetrics}
          
          ## 🎯 추천 액션
          
          ### 즉시 수정 필요 ⚠️
          - [ ] 보안 취약점 해결
          - [ ] 코드 복잡도 개선
          - [ ] 테스트 커버리지 향상
          
          ### 개선 권장 💡
          - [ ] 함수 분리 및 모듈화
          - [ ] 주석 및 문서화 개선
          - [ ] 성능 최적화
          
          ---
          *이 리뷰는 AI가 자동으로 생성했습니다. 참고용으로 활용하시고, 최종 판단은 사람이 해주세요.*
          `;
          
          // PR에 리뷰 댓글 작성
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comprehensiveReview
          });

  auto-reviewer-assignment:
    name: 👥 자동 리뷰어 할당
    runs-on: ubuntu-latest
    needs: ai-code-review
    steps:
    - name: 🎯 스마트 리뷰어 할당
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          
          // 변경된 파일 기반 전문가 할당
          const files = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pr.number
          });
          
          const changedFiles = files.data.map(f => f.filename);
          let suggestedReviewers = [];
          
          // 파일 패턴 기반 리뷰어 매핑
          const reviewerMapping = {
            'strategies/': ['strategy-expert', 'trading-specialist'],
            'tests/': ['qa-engineer', 'test-specialist'],
            '.github/workflows/': ['devops-engineer', 'ci-cd-expert'],
            'trader.py': ['senior-developer', 'trading-expert']
          };
          
          for (const [pattern, reviewers] of Object.entries(reviewerMapping)) {
            if (changedFiles.some(file => file.includes(pattern))) {
              suggestedReviewers.push(...reviewers);
            }
          }
          
          // 중복 제거
          suggestedReviewers = [...new Set(suggestedReviewers)];
          
          if (suggestedReviewers.length > 0) {
            await github.rest.issues.createComment({
              issue_number: pr.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🎯 **추천 리뷰어**\n\n변경된 파일을 기반으로 다음 전문가들의 리뷰를 추천합니다:\n${suggestedReviewers.map(r => `- @${r}`).join('\n')}\n\n*자동으로 생성된 추천입니다.*`
            });
          } 