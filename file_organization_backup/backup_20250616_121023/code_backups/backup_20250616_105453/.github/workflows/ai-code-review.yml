name: 🤖 AI 코드 리뷰 & 리팩토링

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  ai-code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 AI 분석 도구 설치
      run: |
        pip install openai anthropic google-generativeai
        pip install pylint flake8 mypy bandit safety
        pip install radon complexity-report
        pip install ast-grep semgrep
    
    - name: 🔍 코드 복잡도 분석
      id: complexity
      run: |
        echo "## 📊 코드 복잡도 분석" >> complexity_report.md
        echo "" >> complexity_report.md
        
        # Radon으로 복잡도 측정
        radon cc . --show-complexity --min B >> complexity_report.md || true
        echo "" >> complexity_report.md
        
        # 함수별 라인 수 분석
        echo "### 📏 함수 길이 분석" >> complexity_report.md
        radon raw . --summary >> complexity_report.md || true
        
        # 중복 코드 검사
        echo "### 🔄 중복 코드 검사" >> complexity_report.md
        pylint --disable=all --enable=duplicate-code . >> complexity_report.md || true
    
    - name: 🤖 Gemini AI 코드 분석
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        python .github/scripts/ai_code_analyzer.py
    
    - name: 🔧 자동 리팩토링 제안
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        python .github/scripts/auto_refactor.py
    
    - name: 🛡️ 보안 취약점 검사
      run: |
        echo "## 🛡️ 보안 분석" >> security_report.md
        bandit -r . -f markdown >> security_report.md || true
        safety check --json >> safety_report.json || true
    
    - name: 📝 AI 리뷰 댓글 작성
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // 분석 결과 읽기
          let complexityReport = '';
          let aiAnalysis = '';
          let refactorSuggestions = '';
          
          try {
            complexityReport = fs.readFileSync('complexity_report.md', 'utf8');
          } catch (e) { complexityReport = '분석 결과 없음'; }
          
          try {
            aiAnalysis = fs.readFileSync('ai_analysis.md', 'utf8');
          } catch (e) { aiAnalysis = 'AI 분석 결과 없음'; }
          
          try {
            refactorSuggestions = fs.readFileSync('refactor_suggestions.md', 'utf8');
          } catch (e) { refactorSuggestions = '리팩토링 제안 없음'; }
          
          const comment = `
          # 🤖 AI 코드 리뷰 리포트
          
          ## 📊 자동 분석 결과
          ${complexityReport}
          
          ## 🧠 AI 분석 의견
          ${aiAnalysis}
          
          ## 🔧 리팩토링 제안
          ${refactorSuggestions}
          
          ---
          *이 리뷰는 AI가 자동으로 생성했습니다. 참고용으로 활용해주세요.*
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 