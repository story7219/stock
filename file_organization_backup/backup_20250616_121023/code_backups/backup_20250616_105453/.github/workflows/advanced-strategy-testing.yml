name: 🧪 고급 전략 테스트 & 검증

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'strategies/**'
      - 'trading/**'
      - 'trader.py'
  push:
    branches: [main]
  schedule:
    - cron: '0 1 * * 1-5'  # 평일 오전 1시 자동 테스트
  workflow_dispatch:

jobs:
  strategy-validation:
    name: 🎯 전략 유효성 검증
    runs-on: ubuntu-latest
    outputs:
      validation-passed: ${{ steps.validate.outputs.passed }}
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: 🐍 Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 의존성 설치
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock
        pip install backtrader zipline-reloaded
        pip install ta-lib quantlib-python
    
    - name: 🔍 전략 코드 검증
      id: validate
      run: |
        python .github/scripts/strategy_validator.py
        echo "passed=$(cat validation_result.txt)" >> $GITHUB_OUTPUT

  comprehensive-backtest:
    name: 📈 종합 백테스트
    runs-on: ubuntu-latest
    needs: strategy-validation
    if: needs.strategy-validation.outputs.validation-passed == 'true'
    
    strategy:
      matrix:
        test-period: ['1month', '3months', '6months', '1year']
        market-condition: ['bull', 'bear', 'sideways']
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: 🐍 Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 백테스트 도구 설치
      run: |
        pip install -r requirements.txt
        pip install vectorbt empyrical pyfolio
    
    - name: 📊 시장 데이터 준비
      run: |
        python .github/scripts/prepare_test_data.py --period ${{ matrix.test-period }} --condition ${{ matrix.market-condition }}
    
    - name: 🚀 백테스트 실행
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        TEST_PERIOD: ${{ matrix.test-period }}
        MARKET_CONDITION: ${{ matrix.market-condition }}
      run: |
        python .github/scripts/comprehensive_backtest.py
    
    - name: 📋 결과 업로드
      uses: actions/upload-artifact@v3
      with:
        name: backtest-results-${{ matrix.test-period }}-${{ matrix.market-condition }}
        path: |
          backtest_results_*.json
          performance_charts/
          risk_analysis/

  monte-carlo-simulation:
    name: 🎲 몬테카를로 시뮬레이션
    runs-on: ubuntu-latest
    needs: strategy-validation
    if: needs.strategy-validation.outputs.validation-passed == 'true'
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: 🐍 Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 시뮬레이션 도구 설치
      run: |
        pip install -r requirements.txt
        pip install numpy scipy matplotlib seaborn
    
    - name: 🎲 몬테카를로 시뮬레이션 실행
      run: |
        python .github/scripts/monte_carlo_simulation.py
    
    - name: 📊 시뮬레이션 결과 업로드
      uses: actions/upload-artifact@v3
      with:
        name: monte-carlo-results
        path: |
          monte_carlo_results.json
          simulation_charts/

  stress-testing:
    name: 💥 스트레스 테스트
    runs-on: ubuntu-latest
    needs: strategy-validation
    if: needs.strategy-validation.outputs.validation-passed == 'true'
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: 🐍 Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 스트레스 테스트 도구 설치
      run: |
        pip install -r requirements.txt
    
    - name: 💥 극한 상황 테스트
      run: |
        python .github/scripts/stress_test.py
    
    - name: 📋 스트레스 테스트 결과 업로드
      uses: actions/upload-artifact@v3
      with:
        name: stress-test-results
        path: |
          stress_test_results.json
          extreme_scenarios/

  generate-comprehensive-report:
    name: 📊 종합 리포트 생성
    runs-on: ubuntu-latest
    needs: [comprehensive-backtest, monte-carlo-simulation, stress-testing]
    if: always()
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: 📥 모든 테스트 결과 다운로드
      uses: actions/download-artifact@v3
    
    - name: 🐍 Python 환경 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📊 종합 리포트 생성
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        python .github/scripts/generate_comprehensive_report.py
    
    - name: 📝 PR 코멘트 작성
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comprehensiveReport = '';
          try {
            comprehensiveReport = fs.readFileSync('comprehensive_test_report.md', 'utf8');
          } catch (e) {
            comprehensiveReport = '종합 리포트 생성 실패';
          }
          
          // 성능 기준 체크
          let performanceData = {};
          try {
            performanceData = JSON.parse(fs.readFileSync('performance_summary.json', 'utf8'));
          } catch (e) {
            performanceData = { passed: false, error: '성능 데이터 로드 실패' };
          }
          
          const statusIcon = performanceData.passed ? '✅' : '❌';
          const statusText = performanceData.passed ? '통과' : '실패';
          
          const comment = `
          # 🧪 종합 전략 테스트 리포트 ${statusIcon}
          
          ## 📊 테스트 결과 요약
          - **백테스트**: ${performanceData.backtest_passed ? '✅' : '❌'}
          - **몬테카를로 시뮬레이션**: ${performanceData.monte_carlo_passed ? '✅' : '❌'}
          - **스트레스 테스트**: ${performanceData.stress_test_passed ? '✅' : '❌'}
          
          ${comprehensiveReport}
          
          ## 🎯 최종 판정: **${statusText}**
          
          ${!performanceData.passed ? '⚠️ **이 PR은 성능 기준을 만족하지 않아 병합이 제한됩니다.**' : ''}
          `;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
          // 성능 기준 실패 시 상태 업데이트
          if (!performanceData.passed) {
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'failure',
              context: 'comprehensive-strategy-test',
              description: '전략 테스트 기준 미달'
            });
            
            core.setFailed('종합 전략 테스트 기준을 만족하지 않습니다.');
          } else {
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'success',
              context: 'comprehensive-strategy-test',
              description: '전략 테스트 기준 통과'
            });
          } 