name: 🧪 전략 백테스트 & 테스트

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'strategies/**'
      - 'trader.py'
      - 'tests/**'
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  unit-tests:
    name: 🔬 유닛 테스트
    runs-on: ubuntu-latest
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: 🐍 Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 의존성 설치
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-asyncio
    
    - name: 🧪 유닛 테스트 실행
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: 📊 테스트 커버리지 업로드
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  strategy-backtest:
    name: 📈 전략 백테스트
    runs-on: ubuntu-latest
    needs: unit-tests
    outputs:
      backtest-results: ${{ steps.backtest.outputs.results }}
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: 🐍 Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 의존성 설치
      run: |
        pip install -r requirements.txt
        pip install backtrader quantlib-python
    
    - name: 📈 백테스트 실행
      id: backtest
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        python tests/run_backtest.py > backtest_results.json
        echo "results=$(cat backtest_results.json)" >> $GITHUB_OUTPUT
    
    - name: 📊 백테스트 리포트 생성
      run: |
        python tests/generate_backtest_report.py
    
    - name: 📋 결과 파일 업로드
      uses: actions/upload-artifact@v3
      with:
        name: backtest-results
        path: |
          backtest_results.json
          backtest_report.html
          backtest_charts/

  performance-analysis:
    name: 📊 성능 분석
    runs-on: ubuntu-latest
    needs: strategy-backtest
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: 🐍 Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 분석 도구 설치
      run: |
        pip install -r requirements.txt
        pip install pyfolio empyrical
    
    - name: 📊 성능 지표 계산
      run: |
        python tests/performance_analyzer.py
    
    - name: 🎯 벤치마크 비교
      run: |
        python tests/benchmark_comparison.py

  report-results:
    name: 📝 결과 리포트
    runs-on: ubuntu-latest
    needs: [unit-tests, strategy-backtest, performance-analysis]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: 📥 백테스트 결과 다운로드
      uses: actions/download-artifact@v3
      with:
        name: backtest-results
    
    - name: 📝 PR 코멘트 작성
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // 백테스트 결과 읽기
          let backtestResults = {};
          try {
            const resultsData = fs.readFileSync('backtest_results.json', 'utf8');
            backtestResults = JSON.parse(resultsData);
          } catch (e) {
            console.error('백테스트 결과 읽기 실패:', e);
            backtestResults = { error: '결과 파일을 읽을 수 없습니다.' };
          }
          
          // 성능 기준 체크
          const performanceCheck = {
            totalReturn: backtestResults.total_return || 0,
            maxDrawdown: backtestResults.max_drawdown || 0,
            winRate: backtestResults.win_rate || 0,
            sharpeRatio: backtestResults.sharpe_ratio || 0,
            passed: true,
            issues: []
          };
          
          // 성능 기준 검증
          if (performanceCheck.totalReturn < 0.05) {
            performanceCheck.passed = false;
            performanceCheck.issues.push('총 수익률이 5% 미만입니다.');
          }
          
          if (performanceCheck.maxDrawdown > 0.15) {
            performanceCheck.passed = false;
            performanceCheck.issues.push('최대 손실이 15%를 초과합니다.');
          }
          
          if (performanceCheck.winRate < 0.4) {
            performanceCheck.passed = false;
            performanceCheck.issues.push('승률이 40% 미만입니다.');
          }
          
          if (performanceCheck.sharpeRatio < 1.0) {
            performanceCheck.passed = false;
            performanceCheck.issues.push('샤프 비율이 1.0 미만입니다.');
          }
          
          // 리포트 생성
          const statusIcon = performanceCheck.passed ? '✅' : '❌';
          const statusText = performanceCheck.passed ? '통과' : '실패';
          
          const comment = `
          # 🧪 자동 백테스트 리포트 ${statusIcon}
          
          ## 📊 주요 성과 지표
          
          | 지표 | 값 | 기준 | 상태 |
          |------|----|----|------|
          | 총 수익률 | ${(performanceCheck.totalReturn * 100).toFixed(2)}% | ≥ 5% | ${performanceCheck.totalReturn >= 0.05 ? '✅' : '❌'} |
          | 최대 손실 | ${(performanceCheck.maxDrawdown * 100).toFixed(2)}% | ≤ 15% | ${performanceCheck.maxDrawdown <= 0.15 ? '✅' : '❌'} |
          | 승률 | ${(performanceCheck.winRate * 100).toFixed(2)}% | ≥ 40% | ${performanceCheck.winRate >= 0.4 ? '✅' : '❌'} |
          | 샤프 비율 | ${performanceCheck.sharpeRatio.toFixed(2)} | ≥ 1.0 | ${performanceCheck.sharpeRatio >= 1.0 ? '✅' : '❌'} |
          
          ## 📈 상세 결과
          
          - **백테스트 기간**: ${backtestResults.start_date || 'N/A'} ~ ${backtestResults.end_date || 'N/A'}
          - **총 거래 수**: ${backtestResults.total_trades || 0}회
          - **평균 수익률**: ${((backtestResults.avg_return || 0) * 100).toFixed(2)}%
          - **변동성**: ${((backtestResults.volatility || 0) * 100).toFixed(2)}%
          - **최대 연속 손실**: ${backtestResults.max_consecutive_losses || 0}회
          
          ## 🎯 전략별 성과
          
          ${backtestResults.strategy_performance ? 
            Object.entries(backtestResults.strategy_performance)
              .map(([strategy, perf]) => `- **${strategy}**: 수익률 ${(perf.return * 100).toFixed(2)}%, 거래 ${perf.trades}회`)
              .join('\n') 
            : '전략별 성과 데이터 없음'}
          
          ${!performanceCheck.passed ? `
          ## ⚠️ 성능 이슈
          
          ${performanceCheck.issues.map(issue => `- ${issue}`).join('\n')}
          
          **이 PR은 성능 기준을 만족하지 않아 병합이 제한됩니다.**
          ` : ''}
          
          ## 📋 테스트 상태: **${statusText}**
          
          ---
          *이 리포트는 자동으로 생성되었습니다. 상세한 차트와 분석은 Actions 아티팩트를 확인하세요.*
          `;
          
          // PR 코멘트 작성
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
          // 성능 기준 실패 시 PR 상태 업데이트
          if (!performanceCheck.passed) {
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'failure',
              context: 'strategy-performance',
              description: '전략 성능 기준 미달'
            });
            
            core.setFailed('백테스트 성능 기준을 만족하지 않습니다.');
          } else {
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: 'success',
              context: 'strategy-performance',
              description: '전략 성능 기준 통과'
            });
          } 