# 🧪 투자 분석 시스템 테스트 설정 파일 (pytest.ini)
# =========================================================
#
# 이 파일은 pytest 테스트 프레임워크의 설정을 정의합니다.
# 코스피200·나스닥100·S&P500 투자 분석 시스템의 품질 보증을 위해
# 체계적인 테스트 환경을 구성합니다.
#
# 주요 설정 내용:
# - 테스트 커버리지 90% 이상 유지
# - 비동기 테스트 지원
# - 상세한 테스트 리포트 생성
# - 테스트 마커를 통한 분류 실행
# - 로그 및 경고 관리
#
# 실행 방법:
#   pytest                    # 전체 테스트 실행
#   pytest -m unit           # 단위 테스트만 실행
#   pytest -m integration    # 통합 테스트만 실행
#   pytest --cov-report=html # HTML 커버리지 리포트 생성

[tool:pytest]
# pytest 설정 파일
# Stock Analysis System Test Configuration

# 테스트 디렉토리 (테스트 파일들이 위치한 폴더)
testpaths = tests

# 최소 Python 버전 (호환성 보장)
minversion = 7.0

# 기본 실행 옵션 (테스트 실행 시 자동 적용되는 설정들)
addopts = 
    -ra                                      # 모든 결과 요약 표시
    --strict-markers                         # 정의되지 않은 마커 사용 시 오류
    --strict-config                          # 잘못된 설정 시 오류
    --cov=src                               # src 폴더 코드 커버리지 측정
    --cov-report=term-missing:skip-covered  # 터미널에 누락된 라인 표시
    --cov-report=html:reports/coverage      # HTML 커버리지 리포트 생성
    --cov-report=xml:reports/coverage.xml   # XML 커버리지 리포트 생성
    --cov-fail-under=90                     # 커버리지 90% 미만 시 실패
    --disable-warnings                       # 경고 메시지 비활성화
    --tb=short                              # 간단한 트레이스백 표시
    -x                                      # 첫 번째 실패 시 중단
    -v                                      # 상세 출력 모드

# 테스트 파일 패턴 (인식할 테스트 파일명 규칙)
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# 마커 정의 (테스트 분류 및 선택적 실행을 위한 태그)
markers =
    unit: 단위 테스트 (개별 함수/클래스 테스트)
    integration: 통합 테스트 (모듈 간 연동 테스트)
    slow: 실행 시간이 긴 테스트 (5초 이상)
    network: 네트워크 연결이 필요한 테스트 (API 호출 등)
    ai: AI 모델을 사용하는 테스트 (Gemini AI 등)

# 경고 필터 (불필요한 경고 메시지 제거)
filterwarnings =
    ignore::UserWarning              # 사용자 경고 무시
    ignore::DeprecationWarning       # deprecated 경고 무시
    ignore::PendingDeprecationWarning # 향후 deprecated 예정 경고 무시

# 비동기 테스트 설정 (async/await 테스트 지원)
asyncio_mode = auto                          # 자동 비동기 모드
asyncio_default_fixture_loop_scope = function # 함수 범위 이벤트 루프

# 로그 설정 (테스트 실행 중 로그 출력)
log_cli = true                                        # CLI 로그 활성화
log_cli_level = INFO                                  # INFO 레벨 이상 출력
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s  # 로그 포맷
log_cli_date_format = %Y-%m-%d %H:%M:%S              # 날짜 포맷

# 테스트 발견 설정 (테스트 수집에서 제외할 디렉토리)
norecursedirs = 
    .git            # Git 관련 폴더
    .tox            # Tox 테스트 환경 폴더
    dist            # 배포 폴더
    build           # 빌드 폴더
    *.egg           # Python 패키지 폴더
    .venv           # 가상환경 폴더
    venv            # 가상환경 폴더
    __pycache__     # Python 캐시 폴더
    .pytest_cache   # pytest 캐시 폴더
    htmlcov         # HTML 커버리지 리포트 폴더
    logs            # 로그 폴더
    data            # 데이터 폴더
    reports         # 리포트 폴더
    backups         # 백업 폴더

# 커버리지 설정 (코드 커버리지 측정 상세 설정)
[coverage:run]
source = src                # 커버리지 측정 대상 소스 폴더
omit = 
    */tests/*              # 테스트 파일 제외
    */test_*               # 테스트 관련 파일 제외
    */__init__.py          # __init__.py 파일 제외
    */conftest.py          # pytest 설정 파일 제외
    .venv/*                # 가상환경 제외
    venv/*                 # 가상환경 제외

[coverage:report]
# 커버리지 리포트에서 제외할 코드 라인
exclude_lines =
    pragma: no cover                    # 커버리지 제외 주석
    def __repr__                        # __repr__ 메서드
    raise AssertionError                # AssertionError 발생
    raise NotImplementedError           # NotImplementedError 발생
    if __name__ == .__main__.:          # 메인 실행 블록
    if DEBUG:                           # 디버그 모드 블록
    if settings.DEBUG                   # 설정 디버그 블록

[coverage:html]
directory = htmlcov                                    # HTML 리포트 저장 폴더
title = Stock Analysis System Coverage Report         # HTML 리포트 제목

# 테스트 수집 시간초과 (초 단위)
timeout = 300 