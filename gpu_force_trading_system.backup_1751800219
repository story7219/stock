# gpu_force_trading_system.py - Test 모듈
# 역할: Test 관련 기능 제공

```python
# 파일명: gpu_force_trading_system.py
# 파일 역할: GPU 100% 강제 활용 실전 트레이딩 시스템 - RTX 5080 최적화

import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import pandas as pd
import asyncio
import logging
import time
from datetime import datetime
from typing import Dict, List, Tuple, Optional, Any
import yfinance as yf
import os
from sklearn.preprocessing import StandardScaler

# GPU 강제 설정
torch.backends.cudnn.benchmark = True
torch.backends.cuda.matmul.allow_tf32 = True
torch.backends.cudnn.allow_tf32 = True

# 로깅 설정
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class GPUForceChecker:
    # ... (이전 코드 동일)
    
class GPUOptimizedLSTM(nn.Module):
    # ... (이전 코드 동일)

class GPUTradingSystem:
    # ... (이전 코드 동일)

    async def collect_data(self, period: str = "6mo") -> Dict[str, pd.DataFrame]:
        # ... (이전 코드 동일)
        data_dict = {}
        for symbol in self.symbols:
            try:
                # ... (이전 코드 동일)
                ticker = yf.Ticker(symbol)
                data = ticker.history(period=period)
                if not data.empty:
                    # 기술적 지표 추가 (가독성 향상)
                    data['Returns'] = data['Close'].pct_change()
                    data['MA20'] = data['Close'].rolling(20).mean()
                    data['MA50'] = data['Close'].rolling(50).mean()
                    data['RSI'] = self._calculate_rsi(data['Close'])
                    data['Volatility'] = data['Returns'].rolling(20).std()
                    data['BB_Middle'] = data['Close'].rolling(20).mean()
                    data['BB_Upper'] = data['Close'].rolling(20).mean() + 2 * data['Close'].rolling(20).std()
                    data['BB_Lower'] = data['Close'].rolling(20).mean() - 2 * data['Close'].rolling(20).std()
                    data = data.dropna()
                    data_dict[symbol] = data
                    logger.info(f"✅ {symbol} 데이터 수집 완료: {len(data)}개")
                # ... (이전 코드 동일)
            except Exception as e:
                # ... (이전 코드 동일)

    def _calculate_rsi(self, prices, period=14):
        # ... (이전 코드 동일)

    def prepare_sequences(self, data: pd.DataFrame, seq_length: int = 20) -> Tuple[torch.Tensor, torch.Tensor, StandardScaler]:
        # ... (이전 코드 동일)
        features = ['Open', 'High', 'Low', 'Close', 'Volume', 'Returns', 'MA20', 'MA50', 'RSI', 'Volatility', 'BB_Upper', 'BB_Lower'] # 모든 특성 포함
        available_features = [f for f in features if f in data.columns]
        feature_data = data[available_features].values
        scaler = StandardScaler()
        scaled_data = scaler.fit_transform(feature_data)
        # ... (이전 코드 동일)

    async def train_gpu_models(self, data_dict: Dict[str, pd.DataFrame]):
        # ... (이전 코드 동일)
            # ... (이전 코드 동일)
            X_train, X_test = X[:split_idx], X[split_idx:]
            y_train, y_test = y[:split_idx], y[split_idx:]
            model = self.models[symbol]
            optimizer = optim.AdamW(model.parameters(), lr=0.001, weight_decay=0.01)
            criterion = nn.MSELoss()
            scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=50)
            # ... (이전 코드 동일)


# ... (나머지 코드 동일)
```