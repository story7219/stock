# test_gpu_simple.py - Test 모듈
# 역할: Test 관련 기능 제공

```python
"""
🚀 GPU 가속 간단 테스트
=====================================

GPU 라이브러리 설치 확인 및 기본 기능 테스트
"""

import sys
import time
import numpy as np
import pandas as pd
import torch
import cupy as cp
import cudf


def test_gpu_libraries():
    """GPU 라이브러리 설치 확인"""
    print("🚀 GPU 라이브러리 설치 확인")
    print("=" * 50)

    # 1. PyTorch GPU 테스트
    print("1️⃣ PyTorch GPU 테스트...")
    try:
        print(f"   ✅ PyTorch 버전: {torch.__version__}")
        print(f"   ✅ CUDA 사용 가능: {torch.cuda.is_available()}")
        if torch.cuda.is_available():
            print(f"   ✅ CUDA 버전: {torch.version.cuda}")
            print(f"   ✅ GPU 개수: {torch.cuda.device_count()}")
            print(f"   ✅ 현재 GPU: {torch.cuda.get_device_name(0)}")
            memory_allocated = torch.cuda.memory_allocated(0) / 1024**3
            memory_reserved = torch.cuda.memory_reserved(0) / 1024**3
            print(f"   ✅ GPU 메모리 사용: {memory_allocated:.2f}GB")
            print(f"   ✅ GPU 메모리 예약: {memory_reserved:.2f}GB")
        else:
            print("   ❌ CUDA 사용 불가능")
    except ImportError as e:
        print(f"   ❌ PyTorch 설치 실패: {e}")
        return False

    # 2. cuPy 테스트
    print("\n2️⃣ cuPy 테스트...")
    try:
        print(f"   ✅ cuPy 버전: {cp.__version__}")
        x = cp.random.randn(1000, 1000)
        y = cp.random.randn(1000, 1000)
        start_time = time.time()
        z = cp.dot(x, y)
        gpu_time = time.time() - start_time
        print(f"   ✅ GPU 행렬 곱셈: {gpu_time:.4f}초")
        x_cpu = cp.asnumpy(x)
        y_cpu = cp.asnumpy(y)
        start_time = time.time()
        z_cpu = np.dot(x_cpu, y_cpu)
        cpu_time = time.time() - start_time
        print(f"   ✅ CPU 행렬 곱셈: {cpu_time:.4f}초")
        print(f"   ✅ 속도 향상: {cpu_time / gpu_time:.1f}x")
    except ImportError as e:
        print(f"   ❌ cuPy 설치 실패: {e}")
        return False

    # 3. cuDF 테스트
    print("\n3️⃣ cuDF 테스트...")
    try:
        print(f"   ✅ cuDF 버전: {cudf.__version__}")
        df_cpu = pd.DataFrame({
            'A': np.random.randn(10000),
            'B': np.random.randn(10000),
            'C': np.random.randn(10000)
        })
        start_time = time.time()
        df_gpu = cudf.from_pandas(df_cpu)
        gpu_time = time.time() - start_time
        print(f"   ✅ CPU->GPU 변환: {gpu_time:.4f}초")
        start_time = time.time()
        result_gpu = df_gpu.mean()
        gpu_op_time = time.time() - start_time
        print(f"   ✅ GPU 평균 계산: {gpu_op_time:.4f}초")
        start_time = time.time()
        result_cpu = df_cpu.mean()
        cpu_op_time = time.time() - start_time
        print(f"   ✅ CPU 평균 계산: {cpu_op_time:.4f}초")
        print(f"   ✅ 속도 향상: {cpu_op_time / gpu_op_time:.1f}x")
    except ImportError as e:
        print(f"   ❌ cuDF 설치 실패: {e}")
        return False

    return True  # 함수 실행 결과 반환


if __name__ == "__main__":
    test_gpu_libraries()
```
