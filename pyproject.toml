[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "stock-analysis-system"
version = "5.0.0"
description = "코스피200·나스닥100·S&P500 투자 대가 전략 AI 분석 시스템"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AI Assistant", email = "ai@example.com"}
]
maintainers = [
    {name = "AI Assistant", email = "ai@example.com"}
]
keywords = [
    "stock", "analysis", "ai", "gemini", "kospi", "nasdaq", "sp500",
    "warren-buffett", "peter-lynch", "benjamin-graham",
    "technical-analysis", "investment", "finance", "trading"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    # 핵심 데이터 처리
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    
    # 비동기 HTTP 클라이언트
    "aiohttp>=3.8.0",
    "aiofiles>=23.0.0",
    
    # 웹 스크래핑
    "beautifulsoup4>=4.12.0",
    "selenium>=4.15.0",
    "requests>=2.31.0",
    
    # 금융 데이터
    "yfinance>=0.2.20",
    "investpy>=1.0.8",
    
    # AI/ML
    "google-generativeai>=0.3.0",
    "scikit-learn>=1.3.0",
    
    # 기술적 분석
    "ta>=0.10.2",
    "TA-Lib>=0.4.25",
    
    # 데이터 시각화
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    
    # 구글 서비스
    "google-auth>=2.23.0",
    "google-auth-oauthlib>=1.1.0",
    "google-auth-httplib2>=0.1.1",
    "google-api-python-client>=2.100.0",
    "gspread>=5.11.0",
    
    # 텔레그램
    "python-telegram-bot>=20.6",
    
    # 스케줄링
    "schedule>=1.2.0",
    "APScheduler>=3.10.0",
    
    # 환경 변수 관리
    "python-dotenv>=1.0.0",
    
    # 로깅 및 모니터링
    "loguru>=0.7.0",
    "psutil>=5.9.0",
    
    # 데이터 검증
    "pydantic>=2.4.0",
    "cerberus>=1.3.4",
    
    # 유틸리티
    "tqdm>=4.66.0",
    "colorama>=0.4.6",
    "rich>=13.6.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    # 코드 품질
    "black>=23.9.0",
    "pylint>=2.17.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "isort>=5.12.0",
    
    # 테스팅
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    
    # 개발 도구
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    "ipywidgets>=8.1.0",
    "pre-commit>=3.4.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]

[project.urls]
Homepage = "https://github.com/user/stock-analysis-system"
Documentation = "https://github.com/user/stock-analysis-system/wiki"
Repository = "https://github.com/user/stock-analysis-system.git"
"Bug Reports" = "https://github.com/user/stock-analysis-system/issues"
Changelog = "https://github.com/user/stock-analysis-system/blob/main/CHANGELOG.md"

[project.scripts]
stock-analysis = "main:main"

[tool.setuptools.packages.find]
include = ["src*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

# Black 코드 포맷터 설정
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

# isort import 정렬 설정
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = [
    "pandas", "numpy", "aiohttp", "beautifulsoup4", "selenium",
    "yfinance", "google", "telegram", "gspread", "schedule",
    "pytest", "matplotlib", "seaborn", "plotly"
]

# MyPy 타입 체크 설정
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "yfinance.*",
    "investpy.*",
    "ta.*",
    "talib.*",
    "gspread.*",
    "telegram.*",
    "schedule.*",
    "selenium.*",
]
ignore_missing_imports = true

# Pylint 설정
[tool.pylint.main]
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing",
]

[tool.pylint.messages_control]
disable = [
    "too-many-arguments",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "too-few-public-methods",
    "missing-module-docstring",
    "import-error",
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-locals = 20
max-branches = 15
max-statements = 60

# Bandit 보안 검사 설정
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

# Coverage 설정
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
    ".venv/*",
    "venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if DEBUG:",
    "if settings.DEBUG",
]
fail_under = 85

[tool.coverage.html]
directory = "htmlcov"
title = "Stock Analysis System Coverage Report"

# Pytest 설정
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov=src",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=85",
    "--durations=10",
    "--color=yes",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "api: Tests that require API access",
    "network: Tests that require network access",
    "asyncio: Async tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:gspread",
    "ignore::UserWarning:yfinance",
]
asyncio_mode = "auto" 