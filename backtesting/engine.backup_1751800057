```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# 파일명: engine.py
# 역할: 백테스팅 엔진 구현 모듈
# - 과거 데이터를 사용한 전략 성과 검증
# - 거래 시뮬레이션 및 성과 분석
# - 다양한 백테스팅 지표 계산

"""
📈 백테스팅 엔진 v2.0
투자 전략 백테스트 및 성과 분석
"""

import asyncio
import logging
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
import json
import sqlite3
from pathlib import Path
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import warnings
import yfinance as yf  # 추가
warnings.filterwarnings('ignore')

logger = logging.getLogger(__name__)

# 역할: 백테스트 설정을 저장하는 데이터 클래스
# 입력: 시작/종료 날짜, 초기 자본, 수수료율 등
# 출력: BacktestConfig 인스턴스
@dataclass
class BacktestConfig:
    """백테스트 설정"""
    start_date: str
    end_date: str
    initial_capital: float = 10000000  # 초기 자본 1천만원
    commission: float = 0.0015  # 수수료 0.15%
    slippage: float = 0.001  # 슬리피지 0.1%
    max_positions: int = 10  # 최대 보유 종목 수
    rebalance_frequency: str = "weekly"  # daily, weekly, monthly
    benchmark: str = "^KS11"  # 코스피 지수


# ... (나머지 코드는 동일)

    async def _collect_price_data(self, symbols: List[str]) -> pd.DataFrame:
        """가격 데이터 수집"""
        data_frames = []
        try:
            for symbol in symbols:
                try:
                    ticker = yf.Ticker(symbol)
                    hist = ticker.history(
                        start=self.config['start_date'],
                        end=self.config['end_date'],
                        interval='1d'
                    )
                    if not hist.empty:
                        hist['Symbol'] = symbol
                        data_frames.append(hist)
                except Exception as e:
                    logger.warning(f"종목 {symbol} 데이터 수집 실패: {e}")
                    continue

            if data_frames:
                combined_data = pd.concat(data_frames, ignore_index=True)
                return combined_data.sort_values('Date')
            else:
                return pd.DataFrame()

        except Exception as e:
            logger.error(f"가격 데이터 수집 오류: {e}")
            return pd.DataFrame()

    # ... (나머지 코드는 동일)
```