```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
고급 데이터 수집기 - 한국어/영어 구분 처리
한국주식/선물: pykrx 기반 데이터 수집
해외주식/선물: yfinance 기반 데이터 수집
"""
import logging
import asyncio
import aiohttp
import pandas as pd
import numpy as np
from typing import Dict, List, Any, Optional, Tuple, Union
from dataclasses import dataclass
from datetime import datetime, timedelta
import json
import sqlite3
from pathlib import Path

# 한국 주식 데이터
try:
    from pykrx import stock
    KOREAN_DATA_AVAILABLE = True
except ImportError:
    KOREAN_DATA_AVAILABLE = False

# 해외 주식 데이터
try:
    import yfinance as yf
    FOREIGN_DATA_AVAILABLE = True
except ImportError:
    FOREIGN_DATA_AVAILABLE = False

logger = logging.getLogger(__name__)

@dataclass
class MarketData:
    """시장 데이터"""
    symbol: str
    market_type: str  # "korean", "english"
    timestamp: datetime
    open_price: float
    high_price: float
    low_price: float
    close_price: float
    volume: int
    market_cap: Optional[float] = None
    pe_ratio: Optional[float] = None
    dividend_yield: Optional[float] = None
    volatility: Optional[float] = None


@dataclass
class TechnicalIndicators:
    """기술적 지표"""
    symbol: str
    timestamp: datetime
    sma_20: float
    sma_50: float
    sma_200: float
    rsi: float
    macd: float
    macd_signal: float
    bollinger_upper: float
    bollinger_lower: float
    bollinger_middle: float
    atr: float
    volume_sma: float


class EnhancedDataCollector:
    # ... (이전 코드 동일)
    
    async def collect_korean_market_data(self, symbols: List[str],
                                          days: int = 30) -> List[MarketData]:
        # ... (이전 코드 동일)
    
    async def collect_foreign_market_data(self, symbols: List[str],
                                          days: int = 30) -> List[MarketData]:
        # ... (이전 코드 동일)
    
    def _calculate_volatility(self, df: pd.DataFrame, date: datetime,
                              window: int = 20) -> Optional[float]:
        # ... (이전 코드 동일)

    # ... (이전 코드 동일)
```