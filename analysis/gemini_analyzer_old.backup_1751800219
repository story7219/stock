# gemini_analyzer_old.py - Analysis Engine 모듈
# 역할: Analysis Engine 관련 기능 제공

```python
# 파일 경로: src/analysis/gemini_analyzer.py
# 수정된 코드: _mock_analysis 메서드의 ai_score, final_score 계산식 오류 수정
import os
import logging
from typing import List, Dict, Any, Optional

try:
    import google.generativeai as genai
except ImportError:
    genai = None

logger = logging.getLogger(__name__)

class GeminiStockAnalyzer:
    """
    Gemini AI를 사용하여 종목을 심층 분석하고 최종 점수를 매깁니다.
    """
    def __init__(self):
        self.api_key = os.getenv('GEMINI_API_KEY')
        self.model = None
        if self.api_key and genai:
            try:
                genai.configure(api_key=self.api_key)
                model_name = os.getenv('GOOGLE_GEMINI_MODEL', 'gemini-1.5-flash-8b')
                self.model = genai.GenerativeModel(model_name)
                logger.info(f"Gemini AI 모델 '{model_name}' 초기화 완료.")
            except Exception as e:
                logger.error(f"Gemini AI 모델 초기화 실패: {e}")
        else:
            logger.warning("Gemini API 키가 없거나 라이브러리가 설치되지 않았습니다. "
                           "모의 분석으로 작동합니다.")

    async def analyze_stocks(self, stocks: List[Dict[str, Any]],
                             strategy_executor) -> List[Dict[str, Any]]:
        """
        주어진 종목 리스트를 Gemini AI로 분석합니다.
        """
        if not self.model:
            return self._mock_analysis(stocks)

        # 실제 AI 분석은 여기에 구현 (현재는 모의 분석으로 대체)
        # TODO: 실제 Gemini API 호출 및 결과 파싱 로직 추가
        return self._mock_analysis(stocks)

    def _mock_analysis(self, stocks: List[Dict[str, Any]]) \
            -> List[Dict[str, Any]]:
        """
        AI 모델이 없을 때 사용되는 모의 분석.
        전략 점수를 기반으로 최종 점수를 간단히 계산합니다.
        """
        analyzed_stocks = []
        for stock in stocks:
            strategy_score = stock.get('strategy_score', 0)
            ticker = stock.get('ticker', '')
            ai_score = max(0, min(100, int(strategy_score * ((hash(ticker) % 10 - 5) / 10))))
            final_score = strategy_score * 0.7 + ai_score * 0.3
            stock['ai_score'] = ai_score
            stock['final_score'] = final_score
            analyzed_stocks.append(stock)
        return analyzed_stocks
```
