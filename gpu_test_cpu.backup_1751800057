```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CPU 강제 딥러닝 테스트 (GPU 호환성 문제 해결)
"""
import torch
import torch.nn as nn
import torch.optim as optim
import time
import numpy as np

def test_cpu_deep_learning():
    """CPU 딥러닝 실전 테스트"""
    print("🚀 CPU 딥러닝 실전 테스트 시작!")
    
    # CPU 강제 사용
    device = torch.device('cpu')
    print(f"사용 디바이스: {device}")
    
    # 실전 딥러닝 모델 정의
    class DeepNeuralNetwork(nn.Module):
        def __init__(self, input_size: int = 100, hidden_size: int = 256):
            super().__init__()
            self.layers = nn.Sequential(
                nn.Linear(input_size, hidden_size),
                nn.ReLU(),
                nn.Dropout(0.3),
                nn.Linear(hidden_size, hidden_size // 2),
                nn.ReLU(),
                nn.Dropout(0.3),
                nn.Linear(hidden_size // 2, hidden_size // 4),
                nn.ReLU(),
                nn.Dropout(0.2),
                nn.Linear(hidden_size // 4, 1)
            )
        
        def forward(self, x: torch.Tensor) -> torch.Tensor:
            return self.layers(x)
    
    # 모델 생성
    model = DeepNeuralNetwork().to(device)
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    criterion = nn.MSELoss()
    
    print(f"모델 생성 완료 - 디바이스: {next(iter(model.parameters()), None).device if model.parameters() else 'None'}")  # None 처리 추가
    
    # 실전 데이터 생성
    batch_size = 1000
    input_size = 100
    
    X = torch.randn(batch_size, input_size).to(device)
    y = torch.randn(batch_size, 1).to(device)
    
    print(f"데이터 생성 완료 - X: {X.shape}, y: {y.shape}")
    
    # 실전 학습
    print("\n🔥 CPU 딥러닝 학습 시작!")
    start_time = time.time()
    
    model.train()
    for epoch in range(100):
        optimizer.zero_grad()
        outputs = model(X)
        loss = criterion(outputs, y)
        loss.backward()
        optimizer.step()
        
        if epoch % 20 == 0:
            print(f"Epoch {epoch:3d}, 손실: {loss.item():.6f}")
    
    training_time = time.time() - start_time
    print(f"\n✅ 학습 완료! 시간: {training_time:.2f}초")
    
    # 추론 테스트
    print("\n🧠 추론 테스트 시작!")
    model.eval()
    with torch.no_grad():
        test_X = torch.randn(100, input_size).to(device)
        predictions = model(test_X)
        print(f"추론 완료 - 예측값(첫 5개): {predictions[:5].cpu().numpy().flatten()}")
    
    print("\n🎉 CPU 딥러닝 테스트 성공!")

def test_lstm_cpu():
    # ... (LSTM 테스트 함수는 그대로 유지)
    pass

if __name__ == "__main__":
    try:
        test_cpu_deep_learning()
        test_lstm_cpu()
        print("\n" + "="*50)
        print("🎊 모든 CPU 테스트 성공! 딥러닝 준비 완료!")
    except Exception as e:
        print(f"❌ 테스트 실패: {e}")
        import traceback
        traceback.print_exc()
```