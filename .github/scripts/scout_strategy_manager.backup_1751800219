# scout_strategy_manager.py - Analysis Engine 모듈
# 역할: Analysis Engine 관련 기능 제공

```python
"""
🚀 척후병 전략 관리 시스템
투자 대가들의 전략을 활용한 자동 매매 시스템
"""

import os
import sys
import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Any
import requests

# 로깅 설정
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ScoutStrategyManager:
    """척후병 전략 관리자"""
    
    def __init__(self) -> None:
        self.is_mock: bool = os.getenv('IS_MOCK', 'True').lower() == 'true'
        self.kis_app_key: str = os.getenv('KIS_APP_KEY')
        self.kis_app_secret: str = os.getenv('KIS_APP_SECRET')
        self.kis_account_no: str = os.getenv('KIS_ACCOUNT_NO')
        self.telegram_bot_token: str = os.getenv('TELEGRAM_BOT_TOKEN')
        self.telegram_chat_id: str = os.getenv('TELEGRAM_CHAT_ID')
        
        logger.info(f"🚀 척후병 시스템 초기화 (Mock 모드: {self.is_mock})")
    
    def validate_environment(self) -> bool:
        """환경 변수 검증"""
        required_vars: List[str] = ['KIS_APP_KEY', 'KIS_APP_SECRET', 'KIS_ACCOUNT_NO']
        
        if not self.is_mock:
            for var in required_vars:
                if not os.getenv(var):
                    logger.error(f"❌ 필수 환경 변수 누락: {var}")
                    return False
        
        logger.info("✅ 환경 변수 검증 완료")
        return True
    
    # ... (나머지 코드는 동일)
    
    async def run_trading_cycle(self) -> Dict[str, Any]:
        """매매 사이클 실행"""
        logger.info("🔄 매매 사이클 시작")
        
        try:
            # 1. 시장 분석
            market_analysis = await self.analyze_market_conditions()
            
            # 2. 추천 전략 실행
            results: List[Dict[str, Any]] = []
            for strategy in market_analysis['recommended_strategies']:
                result = await self.execute_scout_strategy(strategy)
                results.append(result)
            
            # 3. 결과 집계
            cycle_result: Dict[str, Any] = {
                'timestamp': datetime.now().isoformat(),
                'market_analysis': market_analysis,
                'strategy_results': results,
                'total_strategies': len(results),
                'successful_strategies': len([r for r in results if r['status'] == 'success']),
                'status': 'completed'
            }
            
            # 4. 알림 전송
            notification_message = f"""🚀 **척후병 매매 사이클 완료**

📊 **시장 분석**
- 트렌드: {market_analysis['market_trend']}
- 변동성: {market_analysis['volatility']}
- 거래량: {market_analysis['volume']}

🎯 **실행된 전략**: {len(results)}개
✅ **성공한 전략**: {cycle_result['successful_strategies']}개

⏰ **실행 시간**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            await self.send_telegram_notification(notification_message)
            
            logger.info("🎉 매매 사이클 완료")
            return cycle_result
        
        except Exception as e:
            logger.error(f"❌ 매매 사이클 오류: {e}")
            await self.send_telegram_notification(
                f"❌ 매매 사이클 오류: {str(e)}"
            )
            raise
    # ... (나머지 코드는 동일)
```
