name: "🔍 AI 코드 품질 검사"

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 매일 오전 9시 (KST)에 실행
    - cron: '0 0 * * *'

jobs:
  code_quality_check:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 의존성 설치
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # 고급 품질 검사 도구들 추가
          pip install pylint flake8 black isort mypy bandit pytest pytest-cov

      - name: 🤖 고급 AI 코드 리뷰 실행
        id: ai_review
        run: |
          echo "🤖 기본 AI 코드 리뷰어 실행 중..."
          python .github/scripts/ai_reviewer.py > ai_review_output.txt 2>&1 || true
          
          if [ -f ai_review_output.txt ]; then
            echo "📋 기본 AI 리뷰 결과:"
            cat ai_review_output.txt
          else
            echo "⚠️ 기본 AI 리뷰 결과 파일이 생성되지 않았습니다."
          fi
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 고급 AI 리뷰어 실행 (Gemini AI)
        id: advanced_ai_review
        run: |
          echo "🚀 고급 AI 리뷰어 (Gemini AI) 실행 중..."
          python .github/scripts/advanced_ai_reviewer.py > advanced_ai_review_output.txt 2>&1 || true
          
          if [ -f advanced_ai_review_output.txt ]; then
            echo "🎯 고급 AI 리뷰 결과:"
            cat advanced_ai_review_output.txt
          else
            echo "⚠️ 고급 AI 리뷰 결과 파일이 생성되지 않았습니다."
          fi
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 종합 품질 검사 실행
        id: quality_check
        run: |
          echo "🔍 종합 품질 검사 실행 중..."
          python .github/scripts/quality_check.py > quality_check_output.txt 2>&1 || true
          
          if [ -f quality_check_output.txt ]; then
            echo "📊 품질 검사 결과:"
            cat quality_check_output.txt
            
            # 점수 추출
            if grep -q "전체 점수:" quality_check_output.txt; then
              SCORE=$(grep "전체 점수:" quality_check_output.txt | grep -o '[0-9]\+\.[0-9]\+' | head -1)
              echo "QUALITY_SCORE=$SCORE" >> $GITHUB_ENV
            fi
          else
            echo "⚠️ 품질 검사 결과 파일이 생성되지 않았습니다."
            echo "QUALITY_SCORE=0.0" >> $GITHUB_ENV
          fi

      - name: 🔧 기본 코드 품질 검사 (기존)
        run: |
          echo "=== 파이썬 구문 검사 ==="
          python -c "
          import os
          import py_compile
          import glob
          
          # 핵심 파일들만 구문 검사
          key_files = [
              'config.py',
              'core_trader.py', 
              'advanced_scalping_system.py',
              'test_optimized_scalping.py',
              'code_reviewer.py'
          ]
          
          errors = []
          for file in key_files:
              if os.path.exists(file):
                  try:
                      py_compile.compile(file, doraise=True)
                      print(f'✅ {file}: 구문 검사 통과')
                  except Exception as e:
                      print(f'❌ {file}: 구문 오류 - {e}')
                      errors.append(f'{file}: {e}')
              else:
                  print(f'⚠️ {file}: 파일 없음')
          
          if errors:
              print(f'\\n❌ 총 {len(errors)}개 파일에 구문 오류 발견')
              for error in errors:
                  print(f'   - {error}')
              exit(1)
          else:
              print('✅ 모든 핵심 파일 구문 검사 통과')
          "

      - name: 🔍 핵심 모듈 검사 (기존)
        run: |
          echo "=== 핵심 모듈 검사 ==="
          python -c "
          import os
          import sys
          
          # 테스트 환경변수 설정
          os.environ['IS_MOCK'] = 'True'
          os.environ['KIS_APP_KEY'] = 'test_key'
          os.environ['KIS_APP_SECRET'] = 'test_secret'
          os.environ['KIS_ACCOUNT_NO'] = 'test_account'
          
          # 핵심 모듈들과 필수 여부
          modules = [
              ('config', True),           # 필수 모듈
              ('core_trader', True),      # 필수 모듈  
              ('advanced_scalping_system', False)  # 선택적 모듈
          ]
          
          critical_errors = []
          
          for module_name, is_required in modules:
              try:
                  __import__(module_name)
                  print(f'✅ {module_name}: 정상 로드')
              except Exception as e:
                  if is_required:
                      print(f'❌ {module_name}: {e} (필수 모듈)')
                      critical_errors.append(f'{module_name}: {e}')
                  else:
                      print(f'⚠️ {module_name}: {e} (선택적 모듈)')
          
          if critical_errors:
              print(f'\\n❌ 치명적 오류 발생:')
              for error in critical_errors:
                  print(f'   - {error}')
              sys.exit(1)
          else:
              print('✅ 핵심 모듈 검사 완료 (선택적 모듈 오류는 무시됨)')
          "

      - name: 📊 품질 리포트 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            quality_report.md
            ai_review_output.txt
            advanced_ai_review_output.txt
            quality_check_output.txt
          retention-days: 30

      - name: 💬 PR 댓글 작성 (AI 리뷰 결과)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🤖 AI 코드 리뷰 결과\n\n';
            
            try {
              // 기본 AI 리뷰 결과
              if (fs.existsSync('ai_review_output.txt')) {
                const basicReview = fs.readFileSync('ai_review_output.txt', 'utf8');
                comment += '### 📋 기본 AI 리뷰\n\n```\n' + basicReview + '\n```\n\n';
              }
              
              // 고급 AI 리뷰 결과
              if (fs.existsSync('advanced_ai_review_output.txt')) {
                const advancedReview = fs.readFileSync('advanced_ai_review_output.txt', 'utf8');
                comment += '### 🚀 고급 AI 리뷰 (Gemini AI)\n\n```\n' + advancedReview + '\n```\n\n';
              }
              
              comment += '---\n*🔄 이 리뷰는 투자 분석 시스템 전용 AI가 자동으로 생성했습니다.*';
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('AI 리뷰 댓글 작성 실패:', error);
            }

      - name: 📱 성공 알림
        if: success()
        run: |
          python -c "
          import requests, os
          bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
          chat_id = os.environ.get('TELEGRAM_CHAT_ID')
          score = os.environ.get('QUALITY_SCORE', '0.0')
          
          if bot_token and chat_id:
              message = '🤖 AI 코드 품질 검사 완료! (기본 + 고급 AI 리뷰) 품질 점수: ' + score + '/100 ✅ 모든 검사 통과'
              try:
                  requests.post(f'https://api.telegram.org/bot{bot_token}/sendMessage', 
                              json={'chat_id': chat_id, 'text': message})
              except:
                  pass
          print('✅ 기본 + 고급 AI 품질 검사 완료')
          "
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: 📱 실패 알림
        if: failure()
        run: |
          python -c "
          import requests, os
          bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
          chat_id = os.environ.get('TELEGRAM_CHAT_ID')
          score = os.environ.get('QUALITY_SCORE', '0.0')
          
          if bot_token and chat_id:
              message = '🚨 AI 코드 품질 검사 실패! (기본 + 고급 AI 리뷰) 품질 점수: ' + score + '/100 ❌ 코드 검토 필요'
              try:
                  requests.post(f'https://api.telegram.org/bot{bot_token}/sendMessage', 
                              json={'chat_id': chat_id, 'text': message})
              except:
                  pass
          print('❌ 기본 + 고급 AI 품질 검사 실패')
          "
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }} 