name: "🔒 보안 감사 및 취약점 검사"

on:
  schedule:
    - cron: '0 2 * * 1'      # 매주 월요일 11:00 (주간 보안 점검)
  workflow_dispatch:
    inputs:
      audit_level:
        description: '보안 감사 레벨'
        required: false
        default: 'standard'
        type: choice
        options:
          - 'standard'
          - 'comprehensive'
          - 'critical_only'
  push:
    branches: [ main, develop ]

jobs:
  security_audit:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🐍 Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 보안 도구 설치
        run: |
          pip install --upgrade pip
          pip install bandit safety semgrep
          pip install -r requirements.txt

      - name: 🔍 API 키 및 민감정보 검사
        run: |
          python security_check.py
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          MOCK_KIS_APP_KEY: ${{ secrets.MOCK_KIS_APP_KEY }}
          MOCK_KIS_APP_SECRET: ${{ secrets.MOCK_KIS_APP_SECRET }}
          MOCK_KIS_ACCOUNT_NUMBER: ${{ secrets.MOCK_KIS_ACCOUNT_NUMBER }}

      - name: 🛡️ Python 보안 취약점 검사 (Bandit)
        run: |
          echo "=== Python 보안 취약점 검사 ==="
          bandit -r . -f json -o bandit_report.json || true
          python -c "
          import json
          import os
          
          if os.path.exists('bandit_report.json'):
              with open('bandit_report.json', 'r') as f:
                  report = json.load(f)
              
              high_issues = [issue for issue in report.get('results', []) if issue['issue_severity'] == 'HIGH']
              medium_issues = [issue for issue in report.get('results', []) if issue['issue_severity'] == 'MEDIUM']
              
              print(f'🔴 고위험 취약점: {len(high_issues)}개')
              print(f'🟡 중위험 취약점: {len(medium_issues)}개')
              
              if high_issues:
                  print('\n⚠️ 고위험 취약점 상세:')
                  for issue in high_issues[:5]:
                      print(f'   {issue["filename"]}:{issue["line_number"]} - {issue["test_name"]}')
                      print(f'     {issue["issue_text"]}')
              
              if len(high_issues) == 0 and len(medium_issues) <= 5:
                  print('✅ 심각한 보안 취약점 없음')
          else:
              print('⚠️ Bandit 리포트 생성 실패')
          "

      - name: 📚 의존성 취약점 검사 (Safety)
        run: |
          echo "=== 의존성 취약점 검사 ==="
          safety check --json --output safety_report.json || true
          python -c "
          import json
          import os
          
          if os.path.exists('safety_report.json'):
              with open('safety_report.json', 'r') as f:
                  content = f.read()
                  if content.strip():
                      try:
                          report = json.loads(content)
                          vulnerabilities = report if isinstance(report, list) else []
                          
                          print(f'📦 발견된 취약점: {len(vulnerabilities)}개')
                          
                          if vulnerabilities:
                              print('\n⚠️ 취약한 패키지:')
                              for vuln in vulnerabilities[:5]:
                                  if isinstance(vuln, dict):
                                      pkg = vuln.get('package', 'Unknown')
                                      version = vuln.get('installed_version', 'Unknown')
                                      advisory = vuln.get('advisory', 'No description')
                                      print(f'   {pkg} v{version}: {advisory[:100]}...')
                          else:
                              print('✅ 알려진 취약점 없음')
                      except json.JSONDecodeError:
                          print('✅ 취약점 없음 (JSON 파싱 오류)')
                  else:
                      print('✅ 의존성 취약점 없음')
          else:
              print('⚠️ Safety 검사 결과 없음')
          "

      - name: 🔧 환경 설정 보안 검사
        run: |
          echo "✅ 환경 설정 검사는 security_check.py에서 통합 처리됩니다"
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          MOCK_KIS_APP_KEY: ${{ secrets.MOCK_KIS_APP_KEY }}
          MOCK_KIS_APP_SECRET: ${{ secrets.MOCK_KIS_APP_SECRET }}
          MOCK_KIS_ACCOUNT_NUMBER: ${{ secrets.MOCK_KIS_ACCOUNT_NUMBER }}

      - name: 📱 보안 리포트 전송
        if: success()
        run: |
          python -c "
          import requests
          import os
          from datetime import datetime
          
          bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
          chat_id = os.environ.get('TELEGRAM_CHAT_ID')
          
          if bot_token and chat_id and bot_token != 'test_telegram_token':
              message = f'''🔒 보안 감사 완료!
              
              📅 검사일: {datetime.now().strftime('%Y-%m-%d %H:%M')}
              
              ✅ API 키 노출 검사 완료
              ✅ Python 보안 취약점 검사 완료  
              ✅ 의존성 취약점 검사 완료
              ✅ 환경 설정 보안 검사 완료
              
              🛡️ 시스템 보안이 양호합니다.'''
              
              try:
                  requests.post(
                      f'https://api.telegram.org/bot{bot_token}/sendMessage',
                      json={'chat_id': chat_id, 'text': message}
                  )
                  print('✅ 보안 리포트 전송 완료')
              except Exception as e:
                  print(f'⚠️ 텔레그램 전송 실패: {e}')
          else:
              print('✅ 보안 감사 완료 (테스트 모드)')
          "
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: 📱 보안 경고 알림
        if: failure()
        run: |
          python -c "
          import requests
          import os
          from datetime import datetime
          
          bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
          chat_id = os.environ.get('TELEGRAM_CHAT_ID')
          
          if bot_token and chat_id and bot_token != 'test_telegram_token':
              message = f'''🚨 보안 감사 경고!
              
              ⚠️ 보안 검사 중 문제가 발견되었습니다.
              📅 {datetime.now().strftime('%Y-%m-%d %H:%M')}
              
              즉시 점검이 필요합니다.
              GitHub Actions 로그를 확인하세요.'''
              
              try:
                  requests.post(
                      f'https://api.telegram.org/bot{bot_token}/sendMessage',
                      json={'chat_id': chat_id, 'text': message}
                  )
              except:
                  pass
          print('🚨 보안 경고 발생')
          "
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }} 