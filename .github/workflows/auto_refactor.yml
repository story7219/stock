name: "🔧 자동 리팩토링 - 투자 전략 보존"

on:
  workflow_dispatch:
    inputs:
      refactor_level:
        description: '리팩토링 수준'
        required: true
        default: 'safe'
        type: choice
        options:
        - safe      # 안전한 수준 (포맷팅, import 정리)
        - moderate  # 중간 수준 (함수 분리, 중복 제거)
        - advanced  # 고급 수준 (구조 개선, 패턴 적용)
      
      preserve_strategies:
        description: '투자 전략 보존 여부'
        required: true
        default: true
        type: boolean

  schedule:
    - cron: '0 3 * * 0'  # 매주 일요일 오전 3시 (UTC) 자동 실행

env:
  PYTHON_VERSION: '3.11'
  REFACTOR_REPORT_PATH: 'reports/refactor_analysis.md'

jobs:
  analyze_and_refactor:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🐍 Python 환경 설정
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 개발 도구 설치
        run: |
          pip install --upgrade pip
          pip install black isort pylint mypy bandit
          pip install -r requirements.txt
          
          # 리팩토링 도구 설치
          pip install rope autoflake unify vulture

      - name: 🔍 투자 전략 함수 식별
        id: identify_strategies
        run: |
          python -c "
          import ast
          import os
          from pathlib import Path
          
          # 투자 전략 관련 함수/클래스 식별
          strategy_patterns = [
              'buffett', 'warren', 'graham', 'lynch', 'dalio',
              'technical_analysis', 'strategy', 'indicator',
              'rsi', 'macd', 'bollinger', 'moving_average',
              'momentum', 'volatility', 'trend'
          ]
          
          protected_items = set()
          
          for py_file in Path('src').rglob('*.py'):
              try:
                  with open(py_file, 'r', encoding='utf-8') as f:
                      content = f.read()
                  
                  tree = ast.parse(content)
                  
                  for node in ast.walk(tree):
                      if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
                          name = node.name.lower()
                          if any(pattern in name for pattern in strategy_patterns):
                              protected_items.add(f'{py_file}:{node.lineno}:{node.name}')
                              print(f'🛡️ 보호된 전략 요소: {py_file}:{node.name}')
              
              except Exception as e:
                  print(f'⚠️ 파일 분석 실패 {py_file}: {e}')
          
          # 보호 목록을 파일로 저장
          with open('protected_strategies.txt', 'w') as f:
              for item in sorted(protected_items):
                  f.write(item + '\\n')
          
          print(f'✅ 총 {len(protected_items)}개 전략 요소 식별 완료')
          "

      - name: 🔧 안전한 자동 리팩토링
        run: |
          echo "🔧 리팩토링 수준: ${{ github.event.inputs.refactor_level || 'safe' }}"
          
          # 1. Import 정리 (안전)
          echo "📚 Import 정리 중..."
          isort src/ --profile black --diff --check-only || isort src/ --profile black
          
          # 2. 코드 포맷팅 (안전) 
          echo "🎨 코드 포맷팅 중..."
          black src/ --diff --check || black src/
          
          # 3. 사용하지 않는 import 제거 (안전)
          echo "🗑️ 불필요한 import 제거 중..."
          autoflake --remove-all-unused-imports --remove-unused-variables --in-place --recursive src/
          
          # 4. 중간 수준 리팩토링 (조건부)
          if [[ "${{ github.event.inputs.refactor_level }}" == "moderate" || "${{ github.event.inputs.refactor_level }}" == "advanced" ]]; then
            echo "🔄 중간 수준 리팩토링 시작..."
            
            # 문자열 따옴표 통일
            unify --in-place --recursive src/
            
            # 데드 코드 제거 (전략 함수 제외)
            python -c "
            import subprocess
            import os
            
            # 보호된 전략 요소 로드
            protected = set()
            if os.path.exists('protected_strategies.txt'):
                with open('protected_strategies.txt', 'r') as f:
                    protected = set(line.strip() for line in f)
            
            print(f'🛡️ 보호된 요소 수: {len(protected)}')
            
            # vulture로 데드 코드 탐지 (보고서만)
            result = subprocess.run(['vulture', 'src/', '--min-confidence', '80'], 
                                  capture_output=True, text=True)
            
            print('📊 데드 코드 분석 결과:')
            print(result.stdout if result.stdout else '✅ 데드 코드 없음')
            "
          fi
          
          # 5. 고급 수준 리팩토링 (조건부)
          if [[ "${{ github.event.inputs.refactor_level }}" == "advanced" ]]; then
            echo "🚀 고급 수준 리팩토링 시작..."
            
            # Rope를 사용한 구조적 리팩토링 (읽기 전용 분석)
            python -c "
            from rope.base.project import Project
            from rope.contrib.autoimport import AutoImport
            import os
            
            try:
                project = Project('.')
                
                # 프로젝트 구조 분석
                for root in project.get_children():
                    if root.is_folder() and root.name == 'src':
                        for child in root.get_children():
                            if child.name.endswith('.py'):
                                print(f'📁 분석: {child.path}')
                
                project.close()
                print('✅ 구조 분석 완료')
                
            except Exception as e:
                print(f'⚠️ 고급 분석 제한됨: {e}')
            "
          fi

      - name: 🔍 리팩토링 후 품질 검사
        run: |
          echo "🔍 리팩토링 후 품질 검사..."
          
          # 구문 검사
          python -c "
          import os
          import py_compile
          from pathlib import Path
          
          errors = []
          for py_file in Path('src').rglob('*.py'):
              try:
                  py_compile.compile(py_file, doraise=True)
                  print(f'✅ {py_file}: 구문 검사 통과')
              except Exception as e:
                  print(f'❌ {py_file}: 구문 오류 - {e}')
                  errors.append(f'{py_file}: {e}')
          
          if errors:
              print(f'\\n❌ 리팩토링 후 {len(errors)}개 구문 오류 발견!')
              for error in errors:
                  print(f'   - {error}')
              exit(1)
          else:
              print('✅ 모든 파일 구문 검사 통과')
          "
          
          # 투자 전략 함수 무결성 검사
          if [[ "${{ github.event.inputs.preserve_strategies }}" == "true" ]]; then
            echo "🛡️ 투자 전략 무결성 검사..."
            python -c "
            import os
            import sys
            
            # 테스트 환경변수 설정
            os.environ['TESTING'] = 'true'
            os.environ['GEMINI_API_KEY'] = 'test_key'
            
            try:
                # 핵심 전략 모듈 검증
                from src.gemini_analyzer import GeminiAnalyzer
                print('✅ GeminiAnalyzer 모듈 로드 성공')
                
                analyzer = GeminiAnalyzer()
                
                # 전략 메서드 존재 확인
                strategy_methods = [
                    '_calculate_buffett_score',
                    '_calculate_lynch_score', 
                    '_calculate_graham_score',
                    '_apply_technical_analysis'
                ]
                
                for method_name in strategy_methods:
                    if hasattr(analyzer, method_name):
                        print(f'✅ 전략 메서드 보존됨: {method_name}')
                    else:
                        print(f'❌ 전략 메서드 누락: {method_name}')
                        sys.exit(1)
                
                print('🎉 모든 투자 전략 무결성 확인 완료!')
                
            except Exception as e:
                print(f'❌ 전략 무결성 검사 실패: {e}')
                sys.exit(1)
            "
          fi

      - name: 📊 리팩토링 리포트 생성
        run: |
          mkdir -p reports
          
          python -c "
          import os
          import subprocess
          from datetime import datetime
          
          # 리팩토링 리포트 생성
          report = f'''# 🔧 자동 리팩토링 리포트
          
          **실행 시간**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
          **리팩토링 수준**: ${{ github.event.inputs.refactor_level || 'safe' }}
          **전략 보존**: ${{ github.event.inputs.preserve_strategies || 'true' }}
          
          ## 📈 코드 품질 지표
          
          '''
          
          # Pylint 점수 측정
          try:
              result = subprocess.run(['pylint', 'src/', '--score=y'], 
                                    capture_output=True, text=True)
              score_line = [line for line in result.stdout.split('\\n') if 'Your code has been rated' in line]
              if score_line:
                  report += f'### Pylint 점수\\n{score_line[0]}\\n\\n'
          except:
              report += '### Pylint 점수\\n측정 실패\\n\\n'
          
          # 파일 통계
          py_files = len(list(os.walk('src')))
          report += f'''### 파일 통계
          - Python 파일 수: {py_files}
          - 보호된 전략 요소: {len(open('protected_strategies.txt', 'r').readlines()) if os.path.exists('protected_strategies.txt') else 0}
          
          ## ✅ 리팩토링 결과
          
          - 🎨 코드 포맷팅: 완료
          - 📚 Import 정리: 완료  
          - 🗑️ 불필요한 코드 제거: 완료
          - 🛡️ 투자 전략 보존: {'✅ 확인됨' if '${{ github.event.inputs.preserve_strategies }}' == 'true' else '⚠️ 건너뜀'}
          
          ## 📋 다음 단계 권장사항
          
          1. 코드 리뷰 진행
          2. 단위 테스트 실행
          3. 통합 테스트 확인
          4. 성능 벤치마크 테스트
          '''
          
          with open('${{ env.REFACTOR_REPORT_PATH }}', 'w', encoding='utf-8') as f:
              f.write(report)
          
          print('📊 리팩토링 리포트 생성 완료')
          "

      - name: 💾 변경사항 커밋 및 푸시
        if: success()
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 변경사항이 있는지 확인
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "🔧 자동 리팩토링 (${{ github.event.inputs.refactor_level || 'safe' }}) - $(date '+%Y-%m-%d %H:%M')"
            git push
            echo "✅ 리팩토링 결과 커밋 완료"
          else
            echo "ℹ️ 변경사항 없음 - 커밋 건너뜀"
          fi

      - name: 📱 완료 알림
        if: always()
        run: |
          python -c "
          import requests
          import os
          import json
          
          bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
          chat_id = os.environ.get('TELEGRAM_CHAT_ID')
          
          if bot_token and chat_id:
              status = '✅ 성공' if '${{ job.status }}' == 'success' else '❌ 실패'
              level = '${{ github.event.inputs.refactor_level || 'safe' }}'
              
              message = f'''🔧 자동 리팩토링 완료
              
          **상태**: {status}
          **수준**: {level}
          **투자 전략**: 🛡️ 보존됨
          **시간**: $(date '+%Y-%m-%d %H:%M')
          
          📊 상세 리포트는 GitHub Actions에서 확인하세요.'''
              
              try:
                  response = requests.post(
                      f'https://api.telegram.org/bot{bot_token}/sendMessage',
                      json={'chat_id': chat_id, 'text': message}
                  )
                  print('📱 텔레그램 알림 전송 완료')
              except Exception as e:
                  print(f'⚠️ 알림 전송 실패: {e}')
          else:
              print('ℹ️ 텔레그램 설정 없음 - 알림 건너뜀')
          "
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: 📋 아티팩트 업로드
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: refactor-report-${{ github.run_number }}
          path: |
            reports/refactor_analysis.md
            protected_strategies.txt
          retention-days: 30 