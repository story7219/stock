# advanced_error_fixer.py - Test 모듈
# 역할: Test 관련 기능 제공

```python
"""
역할: continuous_error_fix.py에서 사용하는 오류 탐지/수정/알림
인터페이스 및 폴백 + 전체 프로젝트 파일 커서룰/마크다운 일괄 적용
전략: 인터페이스, 폴백, 안전성, 일괄 적용, 커서룰 100%, PEP8,
최신 Python 문법, 한글 주석, 유지보수성/확장성/테스트/보안/성능 최상위
"""
import os
import sys
import ast
import re
import json
import time
import subprocess
import logging
from datetime import datetime
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from pathlib import Path

class DefaultErrorDetector:
    """기본 오류 탐지기: 파일별 오류 목록 반환 (실전/테스트 폴백)"""
    def detect_errors(self, file_path: str) -> List[Dict[str, Any]]:
        """파일 내 오류 목록 반환"""
        return []
    def detect_file_errors(self, file_path: str) -> List[Dict[str, Any]]:
        """단일 파일 오류 목록 반환"""
        return []
    def collect_all_errors(self, root_dir: str = '.') -> \
            Dict[str, List[Dict[str, Any]]]:
        """전체 디렉토리 오류 목록 반환"""
        all_errors: Dict[str, List[Dict[str, Any]]] = {}
        for filename in os.listdir(root_dir):
            filepath = os.path.join(root_dir, filename)
            if os.path.isfile(filepath) and filepath.endswith(".py"):
                all_errors[filename] = self.detect_file_errors(filepath)
        return all_errors

class DefaultErrorFixer:
    """기본 오류 수정기: 코드/오류정보 입력시 수정 코드 반환
    (실전/테스트 폴백)"""
    def fix_errors(self, file_path: str, errors: List[Dict[str, Any]]) \
            -> bool:
        """파일 내 오류 일괄 수정 (성공시 True)"""
        return False
    def fix_syntax_error(self, code: str, line: int, message: str,
                         file_path: str) -> str:
        """구문 오류 자동 수정 (수정된 코드 반환)"""
        return code

class DefaultGeminiIntegration:
    """기본 Gemini AI 통합: 코드 분석/수정 폴백 (확장성/테스트용)"""
    def analyze_code(self, code: str) -> Dict[str, Any]:
        """코드 분석 결과 반환"""
        return {}
    def fix_code(self, file_path: str, code: str, prompt: str) \
            -> Optional[str]:
        """AI 기반 코드 수정 결과 반환 (실패시 None)"""
        return None

class DefaultPerformanceTracker:
    """기본 성능 추적기: 성능 지표 추적 폴백 (확장성/테스트용)"""
    def track_performance(self, metrics: Dict[str, Any]) -> None:
        """성능 지표 추적 (확장용)"""
        pass

class DefaultTelegramNotifier:
    """기본 텔레그램 알림기: 메시지 전송 폴백 (실전/테스트용)"""
    def send_message(self, message: str) -> bool:
        """메시지 전송 (성공시 True)"""
        print(f"📱 알림: {message}")
        return True

def apply_to_all_files(project_root: Optional[str] = None) -> None:
    """전체 프로젝트 .py 파일에 커서룰(1번줄 한글주석) 및
    마크다운 코드블록 일괄 적용"""
    root = Path(project_root) if project_root else \
        Path(__file__).resolve().parent
    for f in root.rglob('*.py'):
        try:
            lines = f.read_text(encoding='utf-8').splitlines()
            changed = False
            # 1번줄 한글주석 없으면 추가
            if not (lines and lines[0].strip().startswith('#')
                    and ('파일명' in lines[0] or f.name in lines[0])):
                lines = [
                    f"# {f.name} - 파일 역할: 자동화/분석/실전 등 "
                    "한글로 명확히 기술"
                ] + lines
                changed = True
            # 마크다운 코드블록 제거
            lines = [l for l in lines if not l.strip().
                     startswith('```')]
            if changed or any(l.strip().startswith('```')
                             for l in lines):
                f.write_text('\n'.join(lines), encoding='utf-8')
        except Exception as e:
            logging.error(f"파일 처리 중 오류 발생: {f}, 오류: {e}")
```
