```python
"""
Memory optimizer for efficient memory usage and garbage collection.
"""
import gc
import logging
import psutil
import threading
import time
import weakref
from typing import Any, Dict, List, Optional, Set, Callable
from dataclasses import dataclass
from collections import defaultdict, Counter
import sys
import tracemalloc
from functools import wraps

logger = logging.getLogger(__name__)


@dataclass
class MemoryStats:
    """Memory usage statistics."""
    total_memory: int = 0
    available_memory: int = 0
    used_memory: int = 0
    memory_percent: float = 0.0
    gc_collections: Dict[int, int] = None
    object_counts: Dict[str, int] = None
    peak_memory: int = 0
    last_gc_time: float = 0.0

    def __post_init__(self):
        if self.gc_collections is None:
            self.gc_collections = {}
        if self.object_counts is None:
            self.object_counts = {}


class ObjectTracker:
    # ... (이전 코드)

class MemoryPool:
    # ... (이전 코드)

class MemoryMonitor:
    # ... (이전 코드)


class MemoryOptimizer:
    # ... (이전 코드)

    def _auto_gc_callback(self, stats: MemoryStats) -> None:
        """Automatic garbage collection callback."""
        if stats.memory_percent > self.gc_threshold:
            logger.warning(
                f"메모리 사용량이 {stats.memory_percent:.1f}%로 {self.gc_threshold}% 임계값을 초과했습니다."
            )
            self.force_gc()

            with self._lock:
                for callback in self._optimization_callbacks:
                    try:
                        callback()
                    except Exception as e:
                        logger.error(
                            f"메모리 최적화 콜백 오류: {e}"
                        )

    def force_gc(self) -> Dict[str, int]:
        """Force garbage collection."""
        start_time = time.time()
        collected = {}
        for generation in range(3):
            collected[f'gen_{generation}'] = gc.collect(generation)
        if self.memory_monitor:
            self.memory_monitor._last_gc_time = time.time()
        gc_time = time.time() - start_time
        logger.debug(
            f"가비지 수집이 {gc_time:.3f}초 만에 완료되었습니다.: {collected}"
        )
        return collected
    
    # ... (나머지 코드)


# ... (나머지 코드)
```
