```python
"""
Async executor for high-performance parallel processing.
"""

import asyncio
import logging
import time
from typing import Any, Callable, Dict, List, Optional, Union, Coroutine
from dataclasses import dataclass
from concurrent.futures import ThreadPoolExecutor
import threading
from functools import wraps
import weakref
import gc

logger = logging.getLogger(__name__)


@dataclass
class TaskResult:
    """Task execution result."""
    task_id: str
    result: Any = None
    error: Optional[Exception] = None
    execution_time: float = 0.0
    start_time: float = 0.0
    end_time: float = 0.0
    
    @property
    def is_success(self) -> bool:
        """Check if task execution was successful."""
        return self.error is None
    
    @property
    def is_failed(self) -> bool:
        """Check if task execution failed."""
        return self.error is not None


@dataclass
class ExecutorStats:
    """Executor statistics."""
    total_tasks: int = 0
    completed_tasks: int = 0
    failed_tasks: int = 0
    active_tasks: int = 0
    avg_execution_time: float = 0.0
    total_execution_time: float = 0.0
    peak_concurrent_tasks: int = 0
    last_reset: float = 0.0


class TaskQueue:
    """High-performance task queue with priority support."""
    
    def __init__(self, max_size: int = 10000):
        self.max_size = max_size
        self._queue = asyncio.PriorityQueue(maxsize=max_size)
        self._task_counter = 0
        self._lock = asyncio.Lock()
    
    async def put(self, 
                  coro: Coroutine,
                  priority: int = 0,
                  task_id: Optional[str] = None) -> str:
        """Add task to queue."""
        if task_id is None:
            async with self._lock:
                self._task_counter += 1
                task_id = f"task_{self._task_counter}"
        
        # Lower number = higher priority
        await self._queue.put((priority, task_id, coro))
        return task_id
    
    # ... (rest of the code)
```
