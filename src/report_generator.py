"""
Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Î™®Îìà
Top5 Ï¢ÖÎ™© ÏÑ†Ï†ï Í≤∞Í≥ºÎ•º Îã§ÏñëÌïú ÌòïÏãùÏúºÎ°ú Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
"""

import logging
import os
import json
from typing import List, Dict, Optional, Any
from dataclasses import dataclass, asdict
from datetime import datetime
import pandas as pd
import numpy as np
from jinja2 import Template, Environment, FileSystemLoader
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.io as pio
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
import matplotlib.pyplot as plt
import seaborn as sns
from .gemini_analyzer import GeminiAnalysisResult, Top5Selection
from .technical_analyzer import TechnicalSignal, ChartPattern
from .data_collector import StockData

logger = logging.getLogger(__name__)

@dataclass
class ReportConfig:
    """Î¶¨Ìè¨Ìä∏ ÏÑ§Ï†ï"""
    title: str = "Ultra HTS v5.0 - Top5 Ï¢ÖÎ™© ÏÑ†Ï†ï Î¶¨Ìè¨Ìä∏"
    subtitle: str = "Gemini AI Í∏∞Î∞ò Ìà¨Ïûê Î∂ÑÏÑù ÏãúÏä§ÌÖú"
    author: str = "Ultra HTS Team"
    company: str = "Ultra HTS"
    logo_path: Optional[str] = None
    theme_color: str = "#1f77b4"
    output_directory: str = "reports"
    include_charts: bool = True
    include_technical_analysis: bool = True
    include_risk_warnings: bool = True

class ReportGenerator:
    """Ï¢ÖÌï© Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±Í∏∞"""
    
    def __init__(self, config: Optional[ReportConfig] = None):
        self.config = config or ReportConfig()
        self._ensure_output_directory()
        
        # Ïä§ÌÉÄÏùº ÏÑ§Ï†ï
        plt.style.use('seaborn-v0_8')
        sns.set_palette("husl")
        
        # HTML ÌÖúÌîåÎ¶ø ÌôòÍ≤Ω ÏÑ§Ï†ï
        self.jinja_env = Environment(
            loader=FileSystemLoader(os.path.join(os.path.dirname(__file__), 'templates'))
        )
        
    def _ensure_output_directory(self):
        """Ï∂úÎ†• ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±"""
        os.makedirs(self.config.output_directory, exist_ok=True)
        
    def generate_comprehensive_report(self, 
                                    gemini_result: GeminiAnalysisResult,
                                    market_data: Dict[str, List[StockData]],
                                    strategy_results: Dict[str, Any],
                                    technical_analysis: Optional[Dict[str, Any]] = None) -> Dict[str, str]:
        """
        Ï¢ÖÌï© Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± (Î™®Îì† ÌòïÏãù)
        
        Args:
            gemini_result: Gemini AI Î∂ÑÏÑù Í≤∞Í≥º
            market_data: ÏãúÏû• Îç∞Ïù¥ÌÑ∞
            strategy_results: Ï†ÑÎûµÎ≥Ñ Í≤∞Í≥º
            technical_analysis: Í∏∞Ïà†Ï†Å Î∂ÑÏÑù Í≤∞Í≥º
            
        Returns:
            Dict[str, str]: ÏÉùÏÑ±Îêú ÌååÏùº Í≤ΩÎ°úÎì§
        """
        logger.info("Ï¢ÖÌï© Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏãúÏûë")
        
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_files = {}
            
            # 1. HTML Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
            html_path = self._generate_html_report(
                gemini_result, market_data, strategy_results, technical_analysis, timestamp
            )
            report_files['html'] = html_path
            
            # 2. PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
            pdf_path = self._generate_pdf_report(
                gemini_result, market_data, strategy_results, timestamp
            )
            report_files['pdf'] = pdf_path
            
            # 3. CSV Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞
            csv_path = self._generate_csv_report(gemini_result, timestamp)
            report_files['csv'] = csv_path
            
            # 4. JSON Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞
            json_path = self._generate_json_report(
                gemini_result, market_data, strategy_results, timestamp
            )
            report_files['json'] = json_path
            
            # 5. Ï∞®Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±
            charts_dir = self._generate_chart_images(
                gemini_result, market_data, strategy_results, timestamp
            )
            report_files['charts'] = charts_dir
            
            logger.info(f"Ï¢ÖÌï© Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å: {len(report_files)}Í∞ú ÌååÏùº")
            return report_files
            
        except Exception as e:
            logger.error(f"Ï¢ÖÌï© Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")
            raise
    
    def _generate_html_report(self, 
                            gemini_result: GeminiAnalysisResult,
                            market_data: Dict[str, List[StockData]],
                            strategy_results: Dict[str, Any],
                            technical_analysis: Optional[Dict[str, Any]],
                            timestamp: str) -> str:
        """HTML Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        try:
            # HTML ÌÖúÌîåÎ¶ø
            html_template = """
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ config.title }}</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
        .header {
            text-align: center;
            border-bottom: 3px solid {{ config.theme_color }};
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        .header h1 {
            color: {{ config.theme_color }};
            margin: 0;
            font-size: 2.5em;
        }
        .header h2 {
            color: #666;
            margin: 10px 0;
            font-weight: normal;
        }
        .summary-box {
            background: linear-gradient(135deg, {{ config.theme_color }}, #4a90e2);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
        }
        .top5-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .stock-card {
            border: 1px solid #ddd;
            border-radius: 10px;
            padding: 20px;
            background: #fafafa;
            transition: transform 0.3s;
        }
        .stock-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .rank-badge {
            display: inline-block;
            background: {{ config.theme_color }};
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        .score {
            font-size: 2em;
            font-weight: bold;
            color: {{ config.theme_color }};
        }
        .strategy-scores {
            margin: 15px 0;
        }
        .strategy-score {
            display: flex;
            justify-content: space-between;
            margin: 5px 0;
            padding: 5px 10px;
            background: white;
            border-radius: 5px;
        }
        .analysis-section {
            margin: 30px 0;
            padding: 20px;
            border-left: 4px solid {{ config.theme_color }};
            background: #f9f9f9;
        }
        .risk-warning {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 5px;
            padding: 15px;
            margin: 10px 0;
        }
        .risk-warning h4 {
            color: #856404;
            margin-top: 0;
        }
        .chart-container {
            margin: 20px 0;
            text-align: center;
        }
        .footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #ddd;
            color: #666;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }
        th {
            background-color: {{ config.theme_color }};
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
    </style>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <div class="container">
        <!-- Ìó§Îçî -->
        <div class="header">
            <h1>{{ config.title }}</h1>
            <h2>{{ config.subtitle }}</h2>
            <p><strong>Î∂ÑÏÑù ÏãúÍ∞Ñ:</strong> {{ analysis_timestamp }}</p>
            <p><strong>Ïã†Î¢∞ÎèÑ:</strong> {{ confidence_score }}%</p>
        </div>

        <!-- ÏöîÏïΩ -->
        <div class="summary-box">
            <h3>üìä Î∂ÑÏÑù ÏöîÏïΩ</h3>
            <p>{{ analysis_summary }}</p>
        </div>

        <!-- Top 5 Ï¢ÖÎ™© -->
        <div class="analysis-section">
            <h2>üèÜ Top 5 ÏÑ†Ï†ï Ï¢ÖÎ™©</h2>
            <div class="top5-grid">
                {% for stock in top5_selections %}
                <div class="stock-card">
                    <div class="rank-badge">{{ stock.rank }}ÏúÑ</div>
                    <h3>{{ stock.symbol }} - {{ stock.name }}</h3>
                    <div class="score">{{ "%.1f"|format(stock.final_score) }}Ï†ê</div>
                    
                    <div class="strategy-scores">
                        <h4>Ï†ÑÎûµÎ≥Ñ Ï†êÏàò</h4>
                        {% for strategy, score in stock.strategy_scores.items() %}
                        <div class="strategy-score">
                            <span>{{ strategy }}</span>
                            <span><strong>{{ "%.1f"|format(score) }}Ï†ê</strong></span>
                        </div>
                        {% endfor %}
                    </div>
                    
                    <div>
                        <h4>ÏÑ†Ï†ï Ïù¥Ïú†</h4>
                        <p>{{ stock.selection_reason }}</p>
                        
                        <h4>Í∏∞Ïà†Ï†Å Î∂ÑÏÑù</h4>
                        <p>{{ stock.technical_analysis }}</p>
                        
                        <h4>Î¶¨Ïä§ÌÅ¨ ÌèâÍ∞Ä</h4>
                        <p>{{ stock.risk_assessment }}</p>
                        
                        <h4>Gemini AI Î∂ÑÏÑù</h4>
                        <p>{{ stock.gemini_reasoning }}</p>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>

        <!-- ÏãúÏû• Ï†ÑÎßù -->
        <div class="analysis-section">
            <h2>üîÆ ÏãúÏû• Ï†ÑÎßù</h2>
            <p>{{ market_outlook }}</p>
        </div>

        <!-- ÏúÑÌóò ÏöîÏÜå -->
        {% if risk_warnings %}
        <div class="analysis-section">
            <h2>‚ö†Ô∏è ÏúÑÌóò ÏöîÏÜå</h2>
            {% for warning in risk_warnings %}
            <div class="risk-warning">
                <h4>Ï£ºÏùòÏÇ¨Ìï≠</h4>
                <p>{{ warning }}</p>
            </div>
            {% endfor %}
        </div>
        {% endif %}

        <!-- ÎåÄÏïà ÌõÑÎ≥¥ -->
        {% if alternative_candidates %}
        <div class="analysis-section">
            <h2>üí° ÎåÄÏïà ÌõÑÎ≥¥</h2>
            <p>Îã§Ïùå Ï¢ÖÎ™©Îì§ÎèÑ Í≥†Î†§Ìï¥Î≥º ÎßåÌï©ÎãàÎã§:</p>
            <ul>
                {% for candidate in alternative_candidates %}
                <li>{{ candidate }}</li>
                {% endfor %}
            </ul>
        </div>
        {% endif %}

        <!-- ÏãúÏû•Î≥Ñ Îç∞Ïù¥ÌÑ∞ ÏöîÏïΩ -->
        <div class="analysis-section">
            <h2>üìà ÏãúÏû•Î≥Ñ Îç∞Ïù¥ÌÑ∞ ÏöîÏïΩ</h2>
            <table>
                <thead>
                    <tr>
                        <th>ÏãúÏû•</th>
                        <th>Î∂ÑÏÑù Ï¢ÖÎ™© Ïàò</th>
                        <th>ÌèâÍ∑† Ï†êÏàò</th>
                        <th>Top Ï¢ÖÎ™©</th>
                    </tr>
                </thead>
                <tbody>
                    {% for market, data in market_summary.items() %}
                    <tr>
                        <td>{{ market }}</td>
                        <td>{{ data.total_stocks }}</td>
                        <td>{{ "%.1f"|format(data.avg_score) }}</td>
                        <td>{{ data.top_stock }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

        <!-- Ìë∏ÌÑ∞ -->
        <div class="footer">
            <p>Generated by {{ config.company }} - {{ config.author }}</p>
            <p>Ïù¥ Î¶¨Ìè¨Ìä∏Îäî Ìà¨Ïûê Ï∞∏Í≥†Ïö©Ïù¥Î©∞, Ìà¨Ïûê Í≤∞Ï†ïÏùÄ Î≥∏Ïù∏Ïùò ÌåêÎã®Í≥º Ï±ÖÏûÑÌïòÏóê Ïù¥Î£®Ïñ¥Ï†∏Ïïº Ìï©ÎãàÎã§.</p>
        </div>
    </div>
</body>
</html>
            """
            
            # ÌÖúÌîåÎ¶ø Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
            template_data = {
                'config': self.config,
                'analysis_timestamp': gemini_result.analysis_timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                'confidence_score': gemini_result.confidence_score,
                'analysis_summary': gemini_result.analysis_summary,
                'market_outlook': gemini_result.market_outlook,
                'risk_warnings': gemini_result.risk_warnings,
                'alternative_candidates': gemini_result.alternative_candidates,
                'top5_selections': gemini_result.top5_selections,
                'market_summary': self._calculate_market_summary(market_data, strategy_results)
            }
            
            # HTML ÏÉùÏÑ±
            template = Template(html_template)
            html_content = template.render(**template_data)
            
            # ÌååÏùº Ï†ÄÏû•
            filename = f"top5_report_{timestamp}.html"
            filepath = os.path.join(self.config.output_directory, filename)
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(html_content)
            
            logger.info(f"HTML Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å: {filepath}")
            return filepath
            
        except Exception as e:
            logger.error(f"HTML Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")
            raise
    
    def _generate_pdf_report(self, 
                           gemini_result: GeminiAnalysisResult,
                           market_data: Dict[str, List[StockData]],
                           strategy_results: Dict[str, Any],
                           timestamp: str) -> str:
        """PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        try:
            filename = f"top5_report_{timestamp}.pdf"
            filepath = os.path.join(self.config.output_directory, filename)
            
            # PDF Î¨∏ÏÑú ÏÉùÏÑ±
            doc = SimpleDocTemplate(filepath, pagesize=A4)
            styles = getSampleStyleSheet()
            story = []
            
            # Ï†úÎ™© Ïä§ÌÉÄÏùº
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=24,
                spaceAfter=30,
                alignment=1,  # Ï§ëÏïô Ï†ïÎ†¨
                textColor=colors.HexColor(self.config.theme_color)
            )
            
            # Ï†úÎ™©
            story.append(Paragraph(self.config.title, title_style))
            story.append(Paragraph(self.config.subtitle, styles['Heading2']))
            story.append(Spacer(1, 20))
            
            # Î∂ÑÏÑù Ï†ïÎ≥¥
            analysis_info = [
                ['Î∂ÑÏÑù ÏãúÍ∞Ñ', gemini_result.analysis_timestamp.strftime('%Y-%m-%d %H:%M:%S')],
                ['Ïã†Î¢∞ÎèÑ', f"{gemini_result.confidence_score}%"],
                ['Î∂ÑÏÑù Ï¢ÖÎ™© Ïàò', str(sum(len(stocks) for stocks in market_data.values()))]
            ]
            
            info_table = Table(analysis_info, colWidths=[2*inch, 3*inch])
            info_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
                ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 12),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            story.append(info_table)
            story.append(Spacer(1, 20))
            
            # Î∂ÑÏÑù ÏöîÏïΩ
            story.append(Paragraph("Î∂ÑÏÑù ÏöîÏïΩ", styles['Heading2']))
            story.append(Paragraph(gemini_result.analysis_summary, styles['Normal']))
            story.append(Spacer(1, 15))
            
            # Top 5 Ï¢ÖÎ™©
            story.append(Paragraph("Top 5 ÏÑ†Ï†ï Ï¢ÖÎ™©", styles['Heading2']))
            
            for stock in gemini_result.top5_selections:
                # Ï¢ÖÎ™© Ï†ïÎ≥¥ ÌÖåÏù¥Î∏î
                stock_data = [
                    ['ÏàúÏúÑ', str(stock.rank)],
                    ['Ï¢ÖÎ™©', f"{stock.symbol} - {stock.name}"],
                    ['ÏµúÏ¢Ö Ï†êÏàò', f"{stock.final_score:.1f}Ï†ê"],
                    ['ÏÑ†Ï†ï Ïù¥Ïú†', stock.selection_reason[:100] + "..." if len(stock.selection_reason) > 100 else stock.selection_reason]
                ]
                
                stock_table = Table(stock_data, colWidths=[1.5*inch, 4*inch])
                stock_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (0, -1), colors.lightblue),
                    ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 10),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP')
                ]))
                
                story.append(stock_table)
                story.append(Spacer(1, 15))
            
            # ÏãúÏû• Ï†ÑÎßù
            story.append(Paragraph("ÏãúÏû• Ï†ÑÎßù", styles['Heading2']))
            story.append(Paragraph(gemini_result.market_outlook, styles['Normal']))
            story.append(Spacer(1, 15))
            
            # ÏúÑÌóò ÏöîÏÜå
            if gemini_result.risk_warnings:
                story.append(Paragraph("ÏúÑÌóò ÏöîÏÜå", styles['Heading2']))
                for warning in gemini_result.risk_warnings:
                    story.append(Paragraph(f"‚Ä¢ {warning}", styles['Normal']))
                story.append(Spacer(1, 15))
            
            # PDF ÏÉùÏÑ±
            doc.build(story)
            
            logger.info(f"PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å: {filepath}")
            return filepath
            
        except Exception as e:
            logger.error(f"PDF Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")
            raise
    
    def _generate_csv_report(self, gemini_result: GeminiAnalysisResult, timestamp: str) -> str:
        """CSV Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        try:
            filename = f"top5_report_{timestamp}.csv"
            filepath = os.path.join(self.config.output_directory, filename)
            
            # Top 5 Îç∞Ïù¥ÌÑ∞Î•º DataFrameÏúºÎ°ú Î≥ÄÌôò
            data = []
            for stock in gemini_result.top5_selections:
                row = {
                    'Rank': stock.rank,
                    'Symbol': stock.symbol,
                    'Name': stock.name,
                    'Final_Score': stock.final_score,
                    'Selection_Reason': stock.selection_reason,
                    'Technical_Analysis': stock.technical_analysis,
                    'Risk_Assessment': stock.risk_assessment,
                    'Gemini_Reasoning': stock.gemini_reasoning
                }
                
                # Ï†ÑÎûµÎ≥Ñ Ï†êÏàò Ï∂îÍ∞Ä
                for strategy, score in stock.strategy_scores.items():
                    row[f'Strategy_{strategy}'] = score
                
                data.append(row)
            
            df = pd.DataFrame(data)
            df.to_csv(filepath, index=False, encoding='utf-8-sig')
            
            logger.info(f"CSV Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å: {filepath}")
            return filepath
            
        except Exception as e:
            logger.error(f"CSV Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")
            raise
    
    def _generate_json_report(self, 
                            gemini_result: GeminiAnalysisResult,
                            market_data: Dict[str, List[StockData]],
                            strategy_results: Dict[str, Any],
                            timestamp: str) -> str:
        """JSON Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        try:
            filename = f"top5_report_{timestamp}.json"
            filepath = os.path.join(self.config.output_directory, filename)
            
            # Îç∞Ïù¥ÌÑ∞ ÏßÅÎ†¨Ìôî Ï§ÄÎπÑ
            report_data = {
                'metadata': {
                    'generated_at': datetime.now().isoformat(),
                    'analysis_timestamp': gemini_result.analysis_timestamp.isoformat(),
                    'confidence_score': gemini_result.confidence_score,
                    'total_analyzed_stocks': sum(len(stocks) for stocks in market_data.values())
                },
                'gemini_analysis': {
                    'analysis_summary': gemini_result.analysis_summary,
                    'market_outlook': gemini_result.market_outlook,
                    'risk_warnings': gemini_result.risk_warnings,
                    'alternative_candidates': gemini_result.alternative_candidates
                },
                'top5_selections': [
                    {
                        'rank': stock.rank,
                        'symbol': stock.symbol,
                        'name': stock.name,
                        'final_score': stock.final_score,
                        'selection_reason': stock.selection_reason,
                        'strategy_scores': stock.strategy_scores,
                        'technical_analysis': stock.technical_analysis,
                        'risk_assessment': stock.risk_assessment,
                        'gemini_reasoning': stock.gemini_reasoning
                    }
                    for stock in gemini_result.top5_selections
                ],
                'market_summary': self._calculate_market_summary(market_data, strategy_results)
            }
            
            # JSON ÌååÏùº Ï†ÄÏû•
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"JSON Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å: {filepath}")
            return filepath
            
        except Exception as e:
            logger.error(f"JSON Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")
            raise
    
    def _generate_chart_images(self, 
                             gemini_result: GeminiAnalysisResult,
                             market_data: Dict[str, List[StockData]],
                             strategy_results: Dict[str, Any],
                             timestamp: str) -> str:
        """Ï∞®Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±"""
        try:
            charts_dir = os.path.join(self.config.output_directory, f"charts_{timestamp}")
            os.makedirs(charts_dir, exist_ok=True)
            
            # 1. Top 5 Ï†êÏàò ÎπÑÍµê Ï∞®Ìä∏
            self._create_top5_comparison_chart(gemini_result, charts_dir)
            
            # 2. Ï†ÑÎûµÎ≥Ñ Ï†êÏàò Î∂ÑÌè¨ Ï∞®Ìä∏
            self._create_strategy_distribution_chart(gemini_result, charts_dir)
            
            # 3. ÏãúÏû•Î≥Ñ Î∂ÑÏÑù Ï∞®Ìä∏
            self._create_market_analysis_chart(market_data, charts_dir)
            
            # 4. Ïã†Î¢∞ÎèÑ Í≤åÏù¥ÏßÄ Ï∞®Ìä∏
            self._create_confidence_gauge_chart(gemini_result, charts_dir)
            
            logger.info(f"Ï∞®Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± ÏôÑÎ£å: {charts_dir}")
            return charts_dir
            
        except Exception as e:
            logger.error(f"Ï∞®Ìä∏ Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ïã§Ìå®: {e}")
            raise
    
    def _create_top5_comparison_chart(self, gemini_result: GeminiAnalysisResult, output_dir: str):
        """Top 5 Ï†êÏàò ÎπÑÍµê Ï∞®Ìä∏"""
        try:
            symbols = [stock.symbol for stock in gemini_result.top5_selections]
            scores = [stock.final_score for stock in gemini_result.top5_selections]
            
            plt.figure(figsize=(12, 8))
            bars = plt.bar(symbols, scores, color=plt.cm.viridis(np.linspace(0, 1, len(symbols))))
            
            plt.title('Top 5 Ï¢ÖÎ™© Ï†êÏàò ÎπÑÍµê', fontsize=16, fontweight='bold')
            plt.xlabel('Ï¢ÖÎ™©', fontsize=12)
            plt.ylabel('Ï†êÏàò', fontsize=12)
            plt.ylim(0, 100)
            
            # Ï†êÏàò ÎùºÎ≤® Ï∂îÍ∞Ä
            for bar, score in zip(bars, scores):
                plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1,
                        f'{score:.1f}', ha='center', va='bottom', fontweight='bold')
            
            plt.xticks(rotation=45)
            plt.tight_layout()
            plt.savefig(os.path.join(output_dir, 'top5_comparison.png'), dpi=300, bbox_inches='tight')
            plt.close()
            
        except Exception as e:
            logger.error(f"Top 5 ÎπÑÍµê Ï∞®Ìä∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")
    
    def _create_strategy_distribution_chart(self, gemini_result: GeminiAnalysisResult, output_dir: str):
        """Ï†ÑÎûµÎ≥Ñ Ï†êÏàò Î∂ÑÌè¨ Ï∞®Ìä∏"""
        try:
            # Ï†ÑÎûµÎ≥Ñ Ï†êÏàò ÏàòÏßë
            strategy_data = {}
            for stock in gemini_result.top5_selections:
                for strategy, score in stock.strategy_scores.items():
                    if strategy not in strategy_data:
                        strategy_data[strategy] = []
                    strategy_data[strategy].append(score)
            
            if strategy_data:
                fig, ax = plt.subplots(figsize=(12, 8))
                
                # Î∞ïÏä§ÌîåÎ°Ø ÏÉùÏÑ±
                data_to_plot = [scores for scores in strategy_data.values()]
                labels = list(strategy_data.keys())
                
                bp = ax.boxplot(data_to_plot, labels=labels, patch_artist=True)
                
                # ÏÉâÏÉÅ ÏÑ§Ï†ï
                colors = plt.cm.Set3(np.linspace(0, 1, len(bp['boxes'])))
                for patch, color in zip(bp['boxes'], colors):
                    patch.set_facecolor(color)
                
                plt.title('Ï†ÑÎûµÎ≥Ñ Ï†êÏàò Î∂ÑÌè¨', fontsize=16, fontweight='bold')
                plt.xlabel('Ìà¨Ïûê Ï†ÑÎûµ', fontsize=12)
                plt.ylabel('Ï†êÏàò', fontsize=12)
                plt.xticks(rotation=45)
                plt.grid(True, alpha=0.3)
                plt.tight_layout()
                plt.savefig(os.path.join(output_dir, 'strategy_distribution.png'), dpi=300, bbox_inches='tight')
                plt.close()
            
        except Exception as e:
            logger.error(f"Ï†ÑÎûµÎ≥Ñ Î∂ÑÌè¨ Ï∞®Ìä∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")
    
    def _create_market_analysis_chart(self, market_data: Dict[str, List[StockData]], output_dir: str):
        """ÏãúÏû•Î≥Ñ Î∂ÑÏÑù Ï∞®Ìä∏"""
        try:
            markets = list(market_data.keys())
            stock_counts = [len(stocks) for stocks in market_data.values()]
            
            plt.figure(figsize=(10, 6))
            plt.pie(stock_counts, labels=markets, autopct='%1.1f%%', startangle=90)
            plt.title('ÏãúÏû•Î≥Ñ Î∂ÑÏÑù Ï¢ÖÎ™© Ïàò', fontsize=16, fontweight='bold')
            plt.axis('equal')
            plt.tight_layout()
            plt.savefig(os.path.join(output_dir, 'market_analysis.png'), dpi=300, bbox_inches='tight')
            plt.close()
            
        except Exception as e:
            logger.error(f"ÏãúÏû•Î≥Ñ Î∂ÑÏÑù Ï∞®Ìä∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")
    
    def _create_confidence_gauge_chart(self, gemini_result: GeminiAnalysisResult, output_dir: str):
        """Ïã†Î¢∞ÎèÑ Í≤åÏù¥ÏßÄ Ï∞®Ìä∏"""
        try:
            confidence = gemini_result.confidence_score
            
            fig, ax = plt.subplots(figsize=(8, 6), subplot_kw=dict(projection='polar'))
            
            # Í≤åÏù¥ÏßÄ ÏÉùÏÑ±
            theta = np.linspace(0, np.pi, 100)
            r = np.ones_like(theta)
            
            # Î∞∞Í≤Ω
            ax.fill_between(theta, 0, r, alpha=0.3, color='lightgray')
            
            # Ïã†Î¢∞ÎèÑÏóê Îî∞Î•∏ ÏÉâÏÉÅ
            if confidence >= 80:
                color = 'green'
            elif confidence >= 60:
                color = 'orange'
            else:
                color = 'red'
            
            # Ïã†Î¢∞ÎèÑ ÌëúÏãú
            confidence_theta = np.linspace(0, np.pi * confidence / 100, 50)
            confidence_r = np.ones_like(confidence_theta)
            ax.fill_between(confidence_theta, 0, confidence_r, alpha=0.7, color=color)
            
            # ÏÑ§Ï†ï
            ax.set_ylim(0, 1)
            ax.set_theta_zero_location('W')
            ax.set_theta_direction(1)
            ax.set_thetagrids([0, 30, 60, 90, 120, 150, 180], 
                            ['100%', '83%', '67%', '50%', '33%', '17%', '0%'])
            ax.set_rgrids([])
            ax.set_title(f'Î∂ÑÏÑù Ïã†Î¢∞ÎèÑ: {confidence:.1f}%', fontsize=16, fontweight='bold', pad=20)
            
            plt.tight_layout()
            plt.savefig(os.path.join(output_dir, 'confidence_gauge.png'), dpi=300, bbox_inches='tight')
            plt.close()
            
        except Exception as e:
            logger.error(f"Ïã†Î¢∞ÎèÑ Í≤åÏù¥ÏßÄ Ï∞®Ìä∏ ÏÉùÏÑ± Ïã§Ìå®: {e}")
    
    def _calculate_market_summary(self, 
                                market_data: Dict[str, List[StockData]], 
                                strategy_results: Dict[str, Any]) -> Dict[str, Any]:
        """ÏãúÏû•Î≥Ñ ÏöîÏïΩ Í≥ÑÏÇ∞"""
        summary = {}
        
        try:
            for market, stocks in market_data.items():
                if stocks:
                    # Í∏∞Î≥∏ ÌÜµÍ≥Ñ
                    total_stocks = len(stocks)
                    avg_price = np.mean([stock.price for stock in stocks])
                    
                    # ÏûÑÏãúÎ°ú Ï†êÏàò Í≥ÑÏÇ∞ (Ïã§Ï†úÎ°úÎäî Ï†ÑÎûµ Í≤∞Í≥ºÏóêÏÑú Í∞ÄÏ†∏ÏôÄÏïº Ìï®)
                    avg_score = 75.0  # Í∏∞Î≥∏Í∞í
                    top_stock = stocks[0].symbol if stocks else "N/A"
                    
                    summary[market] = {
                        'total_stocks': total_stocks,
                        'avg_price': avg_price,
                        'avg_score': avg_score,
                        'top_stock': top_stock
                    }
        
        except Exception as e:
            logger.error(f"ÏãúÏû•Î≥Ñ ÏöîÏïΩ Í≥ÑÏÇ∞ Ïã§Ìå®: {e}")
        
        return summary 